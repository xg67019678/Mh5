{"ast":null,"code":"import \"vant/es/popup/style\";\nimport _Popup from \"vant/es/popup\";\nimport \"vant/es/nav-bar/style\";\nimport _NavBar from \"vant/es/nav-bar\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport EnterPassword from \"@/components/EnterPassword/index.vue\";\nimport { huoquyue_post, shifoushzhi_zijinmima_post } from \"@/API/user\";\nimport { orderPay } from \"@/API/commodity\";\nimport { priceFormat } from '@/utils/utis';\nexport default {\n  data() {\n    return {\n      money: 0,\n      pwtStatus: false,\n      orderList: [],\n      total: 0,\n      payMethod: [{\n        name: this.$t('余额'),\n        balance: '',\n        selected: true\n      }, {\n        name: 'PayPal',\n        balance: this.$t('您所在的地区尚未开放'),\n        selected: false\n      }, {\n        name: 'Visa',\n        balance: this.$t('您所在的地区尚未开放'),\n        selected: false\n      }, {\n        name: 'Mastercard',\n        balance: this.$t('您所在的地区尚未开放'),\n        selected: false\n      }],\n      icons: [require('@/assets/image/public/qianbao.png'), require('@/assets/image/public/pay.png'), require('@/assets/image/public/visa.png'), require('@/assets/image/public/master.png')],\n      priceFormat\n    };\n  },\n  components: {\n    [_NavBar.name]: _NavBar,\n    [_Popup.name]: _Popup,\n    [EnterPassword.name]: EnterPassword\n  },\n  mounted() {\n    this.getMoneyInfo();\n    this.orderList = JSON.parse(this.$route.query.orderList);\n    this.total = this.$route.query.total;\n    localStorage.removeItem(\"cartList\");\n    //   localStorage.removeItem(\"productList\");\n    // console.log(\n    //   \" 比较->\",\n    //   this.RemoveSameItem(\n    //     this.$ls.get(\"cartList\"),\n    //     this.orderList,\n    //     \"checkedAll\"\n    //   )\n    // );\n  },\n  created() {},\n  methods: {\n    // RemoveSameItem(listOne, listTwo, key) {\n    //   let newList = [];\n    //   loop: for (let itemOne of listOne) {\n    //     for (let itemTwo of listTwo) {\n    //       if (itemOne[key] == itemTwo[key]) {\n    //         continue loop;\n    //       }\n    //     }\n    //     newList.push(itemOne);\n    //   }\n    //   return newList.concat(listTwo);\n    // },\n    clear() {\n      // const list=[]\n      // this.$ls.get(\"cartList\") = list;\n    },\n    onClickLeft() {\n      history.go(-2);\n    },\n    //获取资金密码\n    getMoneyInfo() {\n      huoquyue_post().then(res => {\n        this.money = res.money;\n      });\n    },\n    //pay\n    handlePay() {\n      shifoushzhi_zijinmima_post({}).then(res => {\n        if (res.safeword == 1) {\n          this.pwtStatus = true;\n        } else {\n          this.$router.push({\n            path: \"/FundPasswordSettings\"\n          });\n        }\n      });\n    },\n    //输入完密码\n    getPassword(value) {\n      let data = {\n        safeword: value.substring(0, 6),\n        orderId: \"\"\n      };\n      this.orderList.forEach(item => {\n        data.orderId += item.orderId + \",\";\n      });\n      let productList = this.$ls.get(\"productList\") || [];\n      const ids = this.$route.query.ids || [];\n      // 购物车多个物品时\n      // 我也不知道为啥循环一次删不完  就多循环两次...\n      productList.forEach((item, index) => {\n        if (ids?.includes(item.id)) {\n          productList.splice(index, 1);\n        }\n      });\n      // 我也不知道为啥循环一次删不完  就多循环两次...\n      productList.forEach((item, index) => {\n        if (ids?.includes(item.id)) {\n          productList.splice(index, 1);\n        }\n      });\n      // 我也不知道为啥循环一次删不完  就多循环两次...\n      productList.forEach((item, index) => {\n        if (ids?.includes(item.id)) {\n          productList.splice(index, 1);\n        }\n      });\n      orderPay(data).then(() => {\n        // 如果购物车物品跟单独购买的商品一样时会把购物车那个商品清了, \n        // 如果不需要这个判断isCart=0是单独购买 isCart=1是购物车点进来的购买\n        this.$ls.set(\"productList\", productList);\n        this.$router.push({\n          path: \"/SuccessfulOperation\",\n          query: {\n            orderId: data.orderId,\n            isCart: this.$route.query?.isCart || 0\n          }\n        });\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}