{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { isFunction } from '../utils';\nexport function toArray(item) {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return [item];\n}\nexport function readFile(file, resultType) {\n  return new Promise(function (resolve) {\n    if (resultType === 'file') {\n      resolve(null);\n      return;\n    }\n    var reader = new FileReader();\n    reader.onload = function (event) {\n      resolve(event.target.result);\n    };\n    if (resultType === 'dataUrl') {\n      reader.readAsDataURL(file);\n    } else if (resultType === 'text') {\n      reader.readAsText(file);\n    }\n  });\n}\nexport function isOversize(files, maxSize) {\n  return toArray(files).some(function (file) {\n    if (file) {\n      if (isFunction(maxSize)) {\n        return maxSize(file);\n      }\n      return file.size > maxSize;\n    }\n    return false;\n  });\n}\nvar IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i;\nexport function isImageUrl(url) {\n  return IMAGE_REGEXP.test(url);\n}\nexport function isImageFile(item) {\n  // some special urls cannot be recognized\n  // user can add `isImage` flag to mark it as an image url\n  if (item.isImage) {\n    return true;\n  }\n  if (item.file && item.file.type) {\n    return item.file.type.indexOf('image') === 0;\n  }\n  if (item.url) {\n    return isImageUrl(item.url);\n  }\n  if (item.content) {\n    return item.content.indexOf('data:image') === 0;\n  }\n  return false;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}