{"ast":null,"code":"import _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport { createNamespace, addUnit, noop } from '../utils';\nimport { BORDER_TOP, BORDER_LEFT } from '../utils/constant';\nimport { PopupMixin } from '../mixins/popup';\nimport Button from '../button';\nimport GoodsAction from '../goods-action';\nimport GoodsActionButton from '../goods-action-button';\nvar _createNamespace = createNamespace('dialog'),\n  createComponent = _createNamespace[0],\n  bem = _createNamespace[1],\n  t = _createNamespace[2];\nexport default createComponent({\n  mixins: [PopupMixin()],\n  props: {\n    title: String,\n    theme: String,\n    width: [Number, String],\n    message: String,\n    className: null,\n    callback: Function,\n    beforeClose: Function,\n    messageAlign: String,\n    cancelButtonText: String,\n    cancelButtonColor: String,\n    confirmButtonText: String,\n    confirmButtonColor: String,\n    showCancelButton: Boolean,\n    overlay: {\n      type: Boolean,\n      default: true\n    },\n    allowHtml: {\n      type: Boolean,\n      default: true\n    },\n    transition: {\n      type: String,\n      default: 'van-dialog-bounce'\n    },\n    showConfirmButton: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPopstate: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      loading: {\n        confirm: false,\n        cancel: false\n      }\n    };\n  },\n  methods: {\n    onClickOverlay: function onClickOverlay() {\n      this.handleAction('overlay');\n    },\n    handleAction: function handleAction(action) {\n      var _this = this;\n      this.$emit(action); // show not trigger close event when hidden\n\n      if (!this.value) {\n        return;\n      }\n      if (this.beforeClose) {\n        this.loading[action] = true;\n        this.beforeClose(action, function (state) {\n          if (state !== false && _this.loading[action]) {\n            _this.onClose(action);\n          }\n          _this.loading.confirm = false;\n          _this.loading.cancel = false;\n        });\n      } else {\n        this.onClose(action);\n      }\n    },\n    onClose: function onClose(action) {\n      this.close();\n      if (this.callback) {\n        this.callback(action);\n      }\n    },\n    onOpened: function onOpened() {\n      var _this2 = this;\n      this.$emit('opened');\n      this.$nextTick(function () {\n        var _this2$$refs$dialog;\n        (_this2$$refs$dialog = _this2.$refs.dialog) == null ? void 0 : _this2$$refs$dialog.focus();\n      });\n    },\n    onClosed: function onClosed() {\n      this.$emit('closed');\n    },\n    onKeydown: function onKeydown(event) {\n      var _this3 = this;\n      if (event.key === 'Escape' || event.key === 'Enter') {\n        // skip keyboard events of child elements\n        if (event.target !== this.$refs.dialog) {\n          return;\n        }\n        var onEventType = {\n          Enter: this.showConfirmButton ? function () {\n            return _this3.handleAction('confirm');\n          } : noop,\n          Escape: this.showCancelButton ? function () {\n            return _this3.handleAction('cancel');\n          } : noop\n        };\n        onEventType[event.key]();\n        this.$emit('keydown', event);\n      }\n    },\n    genRoundButtons: function genRoundButtons() {\n      var _this4 = this;\n      var h = this.$createElement;\n      return h(GoodsAction, {\n        \"class\": bem('footer')\n      }, [this.showCancelButton && h(GoodsActionButton, {\n        \"attrs\": {\n          \"size\": \"large\",\n          \"type\": \"warning\",\n          \"text\": this.cancelButtonText || t('cancel'),\n          \"color\": this.cancelButtonColor,\n          \"loading\": this.loading.cancel\n        },\n        \"class\": bem('cancel'),\n        \"on\": {\n          \"click\": function click() {\n            _this4.handleAction('cancel');\n          }\n        }\n      }), this.showConfirmButton && h(GoodsActionButton, {\n        \"attrs\": {\n          \"size\": \"large\",\n          \"type\": \"danger\",\n          \"text\": this.confirmButtonText || t('confirm'),\n          \"color\": this.confirmButtonColor,\n          \"loading\": this.loading.confirm\n        },\n        \"class\": bem('confirm'),\n        \"on\": {\n          \"click\": function click() {\n            _this4.handleAction('confirm');\n          }\n        }\n      })]);\n    },\n    genButtons: function genButtons() {\n      var _this5 = this,\n        _ref;\n      var h = this.$createElement;\n      var multiple = this.showCancelButton && this.showConfirmButton;\n      return h(\"div\", {\n        \"class\": [BORDER_TOP, bem('footer')]\n      }, [this.showCancelButton && h(Button, {\n        \"attrs\": {\n          \"size\": \"large\",\n          \"loading\": this.loading.cancel,\n          \"text\": this.cancelButtonText || t('cancel'),\n          \"nativeType\": \"button\"\n        },\n        \"class\": bem('cancel'),\n        \"style\": {\n          color: this.cancelButtonColor\n        },\n        \"on\": {\n          \"click\": function click() {\n            _this5.handleAction('cancel');\n          }\n        }\n      }), this.showConfirmButton && h(Button, {\n        \"attrs\": {\n          \"size\": \"large\",\n          \"loading\": this.loading.confirm,\n          \"text\": this.confirmButtonText || t('confirm'),\n          \"nativeType\": \"button\"\n        },\n        \"class\": [bem('confirm'), (_ref = {}, _ref[BORDER_LEFT] = multiple, _ref)],\n        \"style\": {\n          color: this.confirmButtonColor\n        },\n        \"on\": {\n          \"click\": function click() {\n            _this5.handleAction('confirm');\n          }\n        }\n      })]);\n    },\n    genContent: function genContent(hasTitle, messageSlot) {\n      var h = this.$createElement;\n      if (messageSlot) {\n        return h(\"div\", {\n          \"class\": bem('content')\n        }, [messageSlot]);\n      }\n      var message = this.message,\n        messageAlign = this.messageAlign;\n      if (message) {\n        var _bem, _domProps;\n        var data = {\n          class: bem('message', (_bem = {\n            'has-title': hasTitle\n          }, _bem[messageAlign] = messageAlign, _bem)),\n          domProps: (_domProps = {}, _domProps[this.allowHtml ? 'innerHTML' : 'textContent'] = message, _domProps)\n        };\n        return h(\"div\", {\n          \"class\": bem('content', {\n            isolated: !hasTitle\n          })\n        }, [h(\"div\", _mergeJSXProps([{}, data]))]);\n      }\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    if (!this.shouldRender) {\n      return;\n    }\n    var message = this.message;\n    var messageSlot = this.slots();\n    var title = this.slots('title') || this.title;\n    var Title = title && h(\"div\", {\n      \"class\": bem('header', {\n        isolated: !message && !messageSlot\n      })\n    }, [title]);\n    return h(\"transition\", {\n      \"attrs\": {\n        \"name\": this.transition\n      },\n      \"on\": {\n        \"afterEnter\": this.onOpened,\n        \"afterLeave\": this.onClosed\n      }\n    }, [h(\"div\", {\n      \"directives\": [{\n        name: \"show\",\n        value: this.value\n      }],\n      \"attrs\": {\n        \"role\": \"dialog\",\n        \"aria-labelledby\": this.title || message,\n        \"tabIndex\": 0\n      },\n      \"class\": [bem([this.theme]), this.className],\n      \"style\": {\n        width: addUnit(this.width)\n      },\n      \"ref\": \"dialog\",\n      \"on\": {\n        \"keydown\": this.onKeydown\n      }\n    }, [Title, this.genContent(title, messageSlot), this.theme === 'round-button' ? this.genRoundButtons() : this.genButtons()])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}