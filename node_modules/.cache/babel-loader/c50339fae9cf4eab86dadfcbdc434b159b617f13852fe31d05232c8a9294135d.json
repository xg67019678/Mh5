{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\n// Utils\nimport { createNamespace, addUnit } from '../utils';\nimport { inherit } from '../utils/functional'; // Types\n\nvar _createNamespace = createNamespace('skeleton'),\n  createComponent = _createNamespace[0],\n  bem = _createNamespace[1];\nvar DEFAULT_ROW_WIDTH = '100%';\nvar DEFAULT_LAST_ROW_WIDTH = '60%';\nfunction Skeleton(h, props, slots, ctx) {\n  if (!props.loading) {\n    return slots.default && slots.default();\n  }\n  function Title() {\n    if (props.title) {\n      return h(\"h3\", {\n        \"class\": bem('title'),\n        \"style\": {\n          width: addUnit(props.titleWidth)\n        }\n      });\n    }\n  }\n  function Rows() {\n    var Rows = [];\n    var rowWidth = props.rowWidth;\n    function getRowWidth(index) {\n      if (rowWidth === DEFAULT_ROW_WIDTH && index === +props.row - 1) {\n        return DEFAULT_LAST_ROW_WIDTH;\n      }\n      if (Array.isArray(rowWidth)) {\n        return rowWidth[index];\n      }\n      return rowWidth;\n    }\n    for (var i = 0; i < props.row; i++) {\n      Rows.push(h(\"div\", {\n        \"class\": bem('row'),\n        \"style\": {\n          width: addUnit(getRowWidth(i))\n        }\n      }));\n    }\n    return Rows;\n  }\n  function Avatar() {\n    if (props.avatar) {\n      var size = addUnit(props.avatarSize);\n      return h(\"div\", {\n        \"class\": bem('avatar', props.avatarShape),\n        \"style\": {\n          width: size,\n          height: size\n        }\n      });\n    }\n  }\n  return h(\"div\", _mergeJSXProps([{\n    \"class\": bem({\n      animate: props.animate,\n      round: props.round\n    })\n  }, inherit(ctx)]), [Avatar(), h(\"div\", {\n    \"class\": bem('content')\n  }, [Title(), Rows()])]);\n}\nSkeleton.props = {\n  title: Boolean,\n  round: Boolean,\n  avatar: Boolean,\n  titleWidth: [Number, String],\n  avatarSize: [Number, String],\n  row: {\n    type: [Number, String],\n    default: 0\n  },\n  loading: {\n    type: Boolean,\n    default: true\n  },\n  animate: {\n    type: Boolean,\n    default: true\n  },\n  avatarShape: {\n    type: String,\n    default: 'round'\n  },\n  rowWidth: {\n    type: [Number, String, Array],\n    default: DEFAULT_ROW_WIDTH\n  }\n};\nexport default createComponent(Skeleton);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}