{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Vue from 'vue';\nimport VanNotify from './Notify';\nimport { isObject, isServer } from '../utils';\nimport { mount } from '../utils/functional';\nvar timer;\nvar instance;\nfunction parseOptions(message) {\n  return isObject(message) ? message : {\n    message: message\n  };\n}\nfunction Notify(options) {\n  /* istanbul ignore if */\n  if (isServer) {\n    return;\n  }\n  if (!instance) {\n    instance = mount(VanNotify, {\n      on: {\n        click: function click(event) {\n          if (instance.onClick) {\n            instance.onClick(event);\n          }\n        },\n        close: function close() {\n          if (instance.onClose) {\n            instance.onClose();\n          }\n        },\n        opened: function opened() {\n          if (instance.onOpened) {\n            instance.onOpened();\n          }\n        }\n      }\n    });\n  }\n  options = _extends({}, Notify.currentOptions, parseOptions(options));\n  _extends(instance, options);\n  clearTimeout(timer);\n  if (options.duration && options.duration > 0) {\n    timer = setTimeout(Notify.clear, options.duration);\n  }\n  return instance;\n}\nfunction defaultOptions() {\n  return {\n    type: 'danger',\n    value: true,\n    message: '',\n    color: undefined,\n    background: undefined,\n    duration: 3000,\n    className: '',\n    onClose: null,\n    onClick: null,\n    onOpened: null\n  };\n}\nNotify.clear = function () {\n  if (instance) {\n    instance.value = false;\n  }\n};\nNotify.currentOptions = defaultOptions();\nNotify.setDefaultOptions = function (options) {\n  _extends(Notify.currentOptions, options);\n};\nNotify.resetDefaultOptions = function () {\n  Notify.currentOptions = defaultOptions();\n};\nNotify.install = function () {\n  Vue.use(VanNotify);\n};\nNotify.Component = VanNotify;\nVue.prototype.$notify = Notify;\nexport default Notify;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}