{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  props: {\n    width: {\n      type: Number,\n      default: 800\n    },\n    height: {\n      type: Number,\n      default: 300\n    },\n    lineWidth: {\n      type: Number,\n      default: 4\n    },\n    lineColor: {\n      type: String,\n      default: '#000000'\n    },\n    bgColor: {\n      type: String,\n      default: ''\n    },\n    isCrop: {\n      type: Boolean,\n      default: false\n    },\n    isClearBgColor: {\n      type: Boolean,\n      default: true\n    },\n    format: {\n      type: String,\n      default: 'image/png'\n    },\n    quality: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      hasDrew: false,\n      resultImg: '',\n      points: [],\n      canvasTxt: null,\n      startX: 0,\n      startY: 0,\n      isDrawing: false,\n      sratio: 1\n    };\n  },\n  computed: {\n    ratio() {\n      return this.height / this.width;\n    },\n    stageInfo() {\n      return this.$refs.canvas.getBoundingClientRect();\n    },\n    myBg() {\n      return this.bgColor ? this.bgColor : 'rgba(255, 255, 255, 0)';\n    }\n  },\n  watch: {\n    'myBg': function (newVal) {\n      this.$refs.canvas.style.background = newVal;\n    }\n  },\n  beforeMount() {\n    window.addEventListener('resize', this.$_resizeHandler);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.$_resizeHandler);\n  },\n  mounted() {\n    const canvas = this.$refs.canvas;\n    canvas.height = this.height;\n    canvas.width = this.width;\n    canvas.style.background = this.myBg;\n    this.$_resizeHandler();\n    // 在画板以外松开鼠标后冻结画笔\n    document.onmouseup = () => {\n      this.isDrawing = false;\n    };\n  },\n  methods: {\n    $_resizeHandler() {\n      const canvas = this.$refs.canvas;\n      canvas.style.width = this.width + \"px\";\n      const realw = parseFloat(window.getComputedStyle(canvas).width);\n      canvas.style.height = this.ratio * realw + \"px\";\n      this.canvasTxt = canvas.getContext('2d');\n      this.canvasTxt.scale(1 * this.sratio, 1 * this.sratio);\n      this.sratio = realw / this.width;\n      this.canvasTxt.scale(1 / this.sratio, 1 / this.sratio);\n    },\n    // pc\n    mouseDown(e) {\n      e = e || event;\n      e.preventDefault();\n      this.isDrawing = true;\n      this.hasDrew = true;\n      let obj = {\n        x: e.offsetX,\n        y: e.offsetY\n      };\n      this.drawStart(obj);\n    },\n    mouseMove(e) {\n      e = e || event;\n      e.preventDefault();\n      if (this.isDrawing) {\n        let obj = {\n          x: e.offsetX,\n          y: e.offsetY\n        };\n        this.drawMove(obj);\n      }\n    },\n    mouseUp(e) {\n      e = e || event;\n      e.preventDefault();\n      let obj = {\n        x: e.offsetX,\n        y: e.offsetY\n      };\n      this.drawEnd(obj);\n      this.isDrawing = false;\n    },\n    // mobile\n    touchStart(e) {\n      e = e || event;\n      e.preventDefault();\n      this.hasDrew = true;\n      if (e.touches.length === 1) {\n        let obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        };\n        this.drawStart(obj);\n      }\n    },\n    touchMove(e) {\n      e = e || event;\n      e.preventDefault();\n      if (e.touches.length === 1) {\n        let obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        };\n        this.drawMove(obj);\n      }\n    },\n    touchEnd(e) {\n      e = e || event;\n      e.preventDefault();\n      if (e.touches.length === 1) {\n        let obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        };\n        this.drawEnd(obj);\n      }\n    },\n    // 绘制\n    drawStart(obj) {\n      this.startX = obj.x;\n      this.startY = obj.y;\n      this.canvasTxt.beginPath();\n      this.canvasTxt.moveTo(this.startX, this.startY);\n      this.canvasTxt.lineTo(obj.x, obj.y);\n      this.canvasTxt.lineCap = 'round';\n      this.canvasTxt.lineJoin = 'round';\n      this.canvasTxt.lineWidth = this.lineWidth * this.sratio;\n      this.canvasTxt.stroke();\n      this.canvasTxt.closePath();\n      this.points.push(obj);\n    },\n    drawMove(obj) {\n      this.canvasTxt.beginPath();\n      this.canvasTxt.moveTo(this.startX, this.startY);\n      this.canvasTxt.lineTo(obj.x, obj.y);\n      this.canvasTxt.strokeStyle = this.lineColor;\n      this.canvasTxt.lineWidth = this.lineWidth * this.sratio;\n      this.canvasTxt.lineCap = 'round';\n      this.canvasTxt.lineJoin = 'round';\n      this.canvasTxt.stroke();\n      this.canvasTxt.closePath();\n      this.startY = obj.y;\n      this.startX = obj.x;\n      this.points.push(obj);\n    },\n    drawEnd(obj) {\n      this.canvasTxt.beginPath();\n      this.canvasTxt.moveTo(this.startX, this.startY);\n      this.canvasTxt.lineTo(obj.x, obj.y);\n      this.canvasTxt.lineCap = 'round';\n      this.canvasTxt.lineJoin = 'round';\n      this.canvasTxt.stroke();\n      this.canvasTxt.closePath();\n      this.points.push(obj);\n      this.points.push({\n        x: -1,\n        y: -1\n      });\n    },\n    // 操作\n    generate(options) {\n      let imgFormat = options && options.format ? options.format : this.format;\n      let imgQuality = options && options.quality ? options.quality : this.quality;\n      const pm = new Promise((resolve, reject) => {\n        if (!this.hasDrew) {\n          reject(`Warning: Not Signned!`);\n          return;\n        }\n        var resImgData = this.canvasTxt.getImageData(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\n        this.canvasTxt.globalCompositeOperation = \"destination-over\";\n        this.canvasTxt.fillStyle = this.myBg;\n        this.canvasTxt.fillRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\n        this.resultImg = this.$refs.canvas.toDataURL(imgFormat, imgQuality);\n        var resultImg = this.resultImg;\n        this.canvasTxt.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\n        this.canvasTxt.putImageData(resImgData, 0, 0);\n        this.canvasTxt.globalCompositeOperation = \"source-over\";\n        if (this.isCrop) {\n          const crop_area = this.getCropArea(resImgData.data);\n          var crop_canvas = document.createElement('canvas');\n          const crop_ctx = crop_canvas.getContext('2d');\n          crop_canvas.width = crop_area[2] - crop_area[0];\n          crop_canvas.height = crop_area[3] - crop_area[1];\n          const crop_imgData = this.canvasTxt.getImageData(...crop_area);\n          crop_ctx.globalCompositeOperation = \"destination-over\";\n          crop_ctx.putImageData(crop_imgData, 0, 0);\n          crop_ctx.fillStyle = this.myBg;\n          crop_ctx.fillRect(0, 0, crop_canvas.width, crop_canvas.height);\n          resultImg = crop_canvas.toDataURL(imgFormat, imgQuality);\n          crop_canvas = null;\n        }\n        resolve(resultImg);\n      });\n      return pm;\n    },\n    reset() {\n      this.canvasTxt.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\n      if (this.isClearBgColor) {\n        this.$emit('update:bgColor', '');\n        this.$refs.canvas.style.background = 'rgba(255, 255, 255, 0)';\n      }\n      this.points = [];\n      this.hasDrew = false;\n      this.resultImg = '';\n    },\n    getCropArea(imgData) {\n      var topX = this.$refs.canvas.width;\n      var btmX = 0;\n      var topY = this.$refs.canvas.height;\n      var btnY = 0;\n      for (var i = 0; i < this.$refs.canvas.width; i++) {\n        for (var j = 0; j < this.$refs.canvas.height; j++) {\n          var pos = (i + this.$refs.canvas.width * j) * 4;\n          if (imgData[pos] > 0 || imgData[pos + 1] > 0 || imgData[pos + 2] || imgData[pos + 3] > 0) {\n            btnY = Math.max(j, btnY);\n            btmX = Math.max(i, btmX);\n            topY = Math.min(j, topY);\n            topX = Math.min(i, topX);\n          }\n        }\n      }\n      topX++;\n      btmX++;\n      topY++;\n      btnY++;\n      const data = [topX, topY, btmX, btnY];\n      return data;\n    }\n  }\n};","map":{"version":3,"names":["props","width","type","Number","default","height","lineWidth","lineColor","String","bgColor","isCrop","Boolean","isClearBgColor","format","quality","data","hasDrew","resultImg","points","canvasTxt","startX","startY","isDrawing","sratio","computed","ratio","stageInfo","$refs","canvas","getBoundingClientRect","myBg","watch","newVal","style","background","beforeMount","window","addEventListener","$_resizeHandler","beforeDestroy","removeEventListener","mounted","document","onmouseup","methods","realw","parseFloat","getComputedStyle","getContext","scale","mouseDown","e","event","preventDefault","obj","x","offsetX","y","offsetY","drawStart","mouseMove","drawMove","mouseUp","drawEnd","touchStart","touches","length","targetTouches","clientX","left","clientY","top","touchMove","touchEnd","beginPath","moveTo","lineTo","lineCap","lineJoin","stroke","closePath","push","strokeStyle","generate","options","imgFormat","imgQuality","pm","Promise","resolve","reject","resImgData","getImageData","globalCompositeOperation","fillStyle","fillRect","toDataURL","clearRect","putImageData","crop_area","getCropArea","crop_canvas","createElement","crop_ctx","crop_imgData","reset","$emit","imgData","topX","btmX","topY","btnY","i","j","pos","Math","max","min"],"sources":["node_modules/vue-esign/src/index.vue"],"sourcesContent":["<template>\n  <canvas ref=\"canvas\" @mousedown=\"mouseDown\" @mousemove=\"mouseMove\" @mouseup=\"mouseUp\"\n  @touchstart=\"touchStart\" @touchmove=\"touchMove\" @touchend=\"touchEnd\"></canvas>\n</template>\n\n<script>\nexport default {\n  props: {\n    width: {\n      type: Number,\n      default: 800\n    },\n    height: {\n      type: Number,\n      default: 300\n    },\n    lineWidth: {\n      type: Number,\n      default: 4\n    },\n    lineColor: {\n      type: String,\n      default: '#000000'\n    },\n    bgColor: {\n      type: String,\n      default: ''\n    },\n    isCrop: {\n      type: Boolean,\n      default: false\n    },\n    isClearBgColor: {\n      type: Boolean,\n      default: true\n    },\n    format: {\n      type: String,\n      default: 'image/png'\n    },\n    quality: {\n      type: Number,\n      default: 1\n    }\n  },\n  data () {\n    return {\n      hasDrew: false,\n      resultImg: '',\n      points: [],\n      canvasTxt: null,\n      startX: 0,\n      startY: 0,\n      isDrawing: false,\n      sratio: 1\n    }\n  },\n  computed: {\n    ratio () {\n      return this.height / this.width\n    },\n    stageInfo () {\n      return this.$refs.canvas.getBoundingClientRect()\n    },\n    myBg () {\n      return this.bgColor ? this.bgColor : 'rgba(255, 255, 255, 0)'\n    }\n  },\n  watch: {\n    'myBg': function (newVal) {\n      this.$refs.canvas.style.background = newVal\n    }\n  },\n  beforeMount () {\n    window.addEventListener('resize', this.$_resizeHandler)\n  },\n  beforeDestroy () {\n    window.removeEventListener('resize', this.$_resizeHandler)\n  },\n  mounted () {\n    const canvas = this.$refs.canvas\n    canvas.height = this.height\n    canvas.width = this.width\n    canvas.style.background = this.myBg\n    this.$_resizeHandler()\n    // 在画板以外松开鼠标后冻结画笔\n    document.onmouseup = () => {\n      this.isDrawing = false\n    }\n  },\n  methods: {\n    $_resizeHandler () {\n      const canvas = this.$refs.canvas\n      canvas.style.width = this.width + \"px\"\n      const realw = parseFloat(window.getComputedStyle(canvas).width)\n      canvas.style.height = this.ratio * realw + \"px\";\n      this.canvasTxt = canvas.getContext('2d')\n      this.canvasTxt.scale(1 * this.sratio, 1 * this.sratio)\n      this.sratio = realw / this.width\n      this.canvasTxt.scale(1 / this.sratio, 1 / this.sratio)\n    },\n    // pc\n    mouseDown (e) {\n      e = e || event\n      e.preventDefault()\n      this.isDrawing = true\n      this.hasDrew = true\n      let obj = {\n        x: e.offsetX,\n        y: e.offsetY\n      }\n      this.drawStart(obj)\n    },\n    mouseMove (e) {\n      e = e || event\n      e.preventDefault()\n      if (this.isDrawing) {\n        let obj = {\n          x: e.offsetX,\n          y: e.offsetY\n        }\n        this.drawMove(obj)\n      }\n    },\n    mouseUp (e) {\n      e = e || event\n      e.preventDefault()\n      let obj = {\n        x: e.offsetX,\n        y: e.offsetY\n      }\n      this.drawEnd(obj)\n      this.isDrawing = false\n    },\n    // mobile\n    touchStart (e) {\n      e = e || event\n      e.preventDefault()\n      this.hasDrew = true\n      if (e.touches.length === 1) {\n        let obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        }\n        this.drawStart(obj)\n      }\n    },\n    touchMove (e) {\n      e = e || event\n      e.preventDefault()\n      if (e.touches.length === 1) {\n        let obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        }\n        this.drawMove(obj)\n      }\n    },\n    touchEnd (e) {\n      e = e || event\n      e.preventDefault()\n      if (e.touches.length === 1) {\n        let obj = {\n          x: e.targetTouches[0].clientX - this.$refs.canvas.getBoundingClientRect().left,\n          y: e.targetTouches[0].clientY - this.$refs.canvas.getBoundingClientRect().top\n        }\n        this.drawEnd(obj)\n      }\n    },\n    // 绘制\n    drawStart (obj) {\n      this.startX = obj.x\n      this.startY = obj.y\n      this.canvasTxt.beginPath()\n      this.canvasTxt.moveTo(this.startX, this.startY)\n      this.canvasTxt.lineTo(obj.x, obj.y)\n      this.canvasTxt.lineCap = 'round'\n      this.canvasTxt.lineJoin = 'round'\n      this.canvasTxt.lineWidth = this.lineWidth * this.sratio\n      this.canvasTxt.stroke()\n      this.canvasTxt.closePath()\n      this.points.push(obj)\n    },\n    drawMove (obj) {\n      this.canvasTxt.beginPath()\n      this.canvasTxt.moveTo(this.startX, this.startY)\n      this.canvasTxt.lineTo(obj.x, obj.y)\n      this.canvasTxt.strokeStyle = this.lineColor\n      this.canvasTxt.lineWidth = this.lineWidth * this.sratio\n      this.canvasTxt.lineCap = 'round'\n      this.canvasTxt.lineJoin = 'round'\n      this.canvasTxt.stroke()\n      this.canvasTxt.closePath()\n      this.startY = obj.y\n      this.startX = obj.x\n      this.points.push(obj)\n    },\n    drawEnd (obj) {\n      this.canvasTxt.beginPath()\n      this.canvasTxt.moveTo(this.startX, this.startY)\n      this.canvasTxt.lineTo(obj.x, obj.y)\n      this.canvasTxt.lineCap = 'round'\n      this.canvasTxt.lineJoin = 'round'\n      this.canvasTxt.stroke()\n      this.canvasTxt.closePath()\n      this.points.push(obj)\n      this.points.push({x: -1, y: -1})\n    },\n    // 操作\n    generate (options) {\n      let imgFormat = options && options.format ? options.format: this.format\n      let imgQuality = options && options.quality ? options.quality: this.quality\n      const pm =  new Promise((resolve, reject) => {\n        if (!this.hasDrew) {\n          reject(`Warning: Not Signned!`)\n          return\n        }\n        var resImgData = this.canvasTxt.getImageData(0, 0, this.$refs.canvas.width, this.$refs.canvas.height)\n        this.canvasTxt.globalCompositeOperation = \"destination-over\"\n        this.canvasTxt.fillStyle = this.myBg\n        this.canvasTxt.fillRect(0,0,this.$refs.canvas.width ,this.$refs.canvas.height)\n        this.resultImg = this.$refs.canvas.toDataURL(imgFormat, imgQuality)\n        var resultImg = this.resultImg\n        this.canvasTxt.clearRect(0, 0, this.$refs.canvas.width ,this.$refs.canvas.height)\n        this.canvasTxt.putImageData(resImgData, 0, 0)\n        this.canvasTxt.globalCompositeOperation = \"source-over\"\n        if (this.isCrop) {\n          const crop_area = this.getCropArea(resImgData.data)\n          var crop_canvas = document.createElement('canvas')\n          const crop_ctx = crop_canvas.getContext('2d')\n          crop_canvas.width = crop_area[2] - crop_area[0]\n          crop_canvas.height = crop_area[3] - crop_area[1]\n          const crop_imgData = this.canvasTxt.getImageData(...crop_area)\n          crop_ctx.globalCompositeOperation = \"destination-over\"\n          crop_ctx.putImageData(crop_imgData, 0, 0)\n          crop_ctx.fillStyle = this.myBg\n          crop_ctx.fillRect(0, 0, crop_canvas.width , crop_canvas.height)\n          resultImg = crop_canvas.toDataURL(imgFormat, imgQuality)\n          crop_canvas = null\n        }\n        resolve(resultImg)\n      })\n      return pm\n    },\n    reset () {\n      this.canvasTxt.clearRect(\n        0,\n        0,\n        this.$refs.canvas.width,\n        this.$refs.canvas.height\n      )\n      if (this.isClearBgColor) {\n        this.$emit('update:bgColor', '')\n        this.$refs.canvas.style.background = 'rgba(255, 255, 255, 0)'\n      }\n      this.points = []\n      this.hasDrew = false\n      this.resultImg = ''\n    },\n    getCropArea (imgData) {\n      var topX = this.$refs.canvas.width; var btmX = 0; var topY = this.$refs.canvas.height; var btnY = 0\n      for (var i = 0; i < this.$refs.canvas.width; i++) {\n        for (var j = 0; j < this.$refs.canvas.height; j++) {\n          var pos = (i + this.$refs.canvas.width * j) * 4\n          if (imgData[pos] > 0 || imgData[pos + 1] > 0 || imgData[pos + 2] || imgData[pos + 3] > 0) {\n            btnY = Math.max(j, btnY)\n            btmX = Math.max(i, btmX)\n            topY = Math.min(j, topY)\n            topX = Math.min(i, topX)\n          }\n        }\n      }\n      topX++\n      btmX++\n      topY++\n      btnY++\n      const data = [topX, topY, btmX, btnY]\n      return data\n    }\n  }\n}\n</script>\n\n<style scoped>\ncanvas {\n  max-width: 100%;\n  display: block;\n}\n</style>\n"],"mappings":";AAMA;EACAA,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAC,MAAA;MACAH,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAE,SAAA;MACAJ,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;IACAG,SAAA;MACAL,IAAA,EAAAM,MAAA;MACAJ,OAAA;IACA;IACAK,OAAA;MACAP,IAAA,EAAAM,MAAA;MACAJ,OAAA;IACA;IACAM,MAAA;MACAR,IAAA,EAAAS,OAAA;MACAP,OAAA;IACA;IACAQ,cAAA;MACAV,IAAA,EAAAS,OAAA;MACAP,OAAA;IACA;IACAS,MAAA;MACAX,IAAA,EAAAM,MAAA;MACAJ,OAAA;IACA;IACAU,OAAA;MACAZ,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAW,KAAA;IACA;MACAC,OAAA;MACAC,SAAA;MACAC,MAAA;MACAC,SAAA;MACAC,MAAA;MACAC,MAAA;MACAC,SAAA;MACAC,MAAA;IACA;EACA;EACAC,QAAA;IACAC,MAAA;MACA,YAAApB,MAAA,QAAAJ,KAAA;IACA;IACAyB,UAAA;MACA,YAAAC,KAAA,CAAAC,MAAA,CAAAC,qBAAA;IACA;IACAC,KAAA;MACA,YAAArB,OAAA,QAAAA,OAAA;IACA;EACA;EACAsB,KAAA;IACA,iBAAAD,CAAAE,MAAA;MACA,KAAAL,KAAA,CAAAC,MAAA,CAAAK,KAAA,CAAAC,UAAA,GAAAF,MAAA;IACA;EACA;EACAG,YAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,eAAA;EACA;EACAC,cAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,eAAA;EACA;EACAG,QAAA;IACA,MAAAb,MAAA,QAAAD,KAAA,CAAAC,MAAA;IACAA,MAAA,CAAAvB,MAAA,QAAAA,MAAA;IACAuB,MAAA,CAAA3B,KAAA,QAAAA,KAAA;IACA2B,MAAA,CAAAK,KAAA,CAAAC,UAAA,QAAAJ,IAAA;IACA,KAAAQ,eAAA;IACA;IACAI,QAAA,CAAAC,SAAA;MACA,KAAArB,SAAA;IACA;EACA;EACAsB,OAAA;IACAN,gBAAA;MACA,MAAAV,MAAA,QAAAD,KAAA,CAAAC,MAAA;MACAA,MAAA,CAAAK,KAAA,CAAAhC,KAAA,QAAAA,KAAA;MACA,MAAA4C,KAAA,GAAAC,UAAA,CAAAV,MAAA,CAAAW,gBAAA,CAAAnB,MAAA,EAAA3B,KAAA;MACA2B,MAAA,CAAAK,KAAA,CAAA5B,MAAA,QAAAoB,KAAA,GAAAoB,KAAA;MACA,KAAA1B,SAAA,GAAAS,MAAA,CAAAoB,UAAA;MACA,KAAA7B,SAAA,CAAA8B,KAAA,UAAA1B,MAAA,WAAAA,MAAA;MACA,KAAAA,MAAA,GAAAsB,KAAA,QAAA5C,KAAA;MACA,KAAAkB,SAAA,CAAA8B,KAAA,UAAA1B,MAAA,WAAAA,MAAA;IACA;IACA;IACA2B,UAAAC,CAAA;MACAA,CAAA,GAAAA,CAAA,IAAAC,KAAA;MACAD,CAAA,CAAAE,cAAA;MACA,KAAA/B,SAAA;MACA,KAAAN,OAAA;MACA,IAAAsC,GAAA;QACAC,CAAA,EAAAJ,CAAA,CAAAK,OAAA;QACAC,CAAA,EAAAN,CAAA,CAAAO;MACA;MACA,KAAAC,SAAA,CAAAL,GAAA;IACA;IACAM,UAAAT,CAAA;MACAA,CAAA,GAAAA,CAAA,IAAAC,KAAA;MACAD,CAAA,CAAAE,cAAA;MACA,SAAA/B,SAAA;QACA,IAAAgC,GAAA;UACAC,CAAA,EAAAJ,CAAA,CAAAK,OAAA;UACAC,CAAA,EAAAN,CAAA,CAAAO;QACA;QACA,KAAAG,QAAA,CAAAP,GAAA;MACA;IACA;IACAQ,QAAAX,CAAA;MACAA,CAAA,GAAAA,CAAA,IAAAC,KAAA;MACAD,CAAA,CAAAE,cAAA;MACA,IAAAC,GAAA;QACAC,CAAA,EAAAJ,CAAA,CAAAK,OAAA;QACAC,CAAA,EAAAN,CAAA,CAAAO;MACA;MACA,KAAAK,OAAA,CAAAT,GAAA;MACA,KAAAhC,SAAA;IACA;IACA;IACA0C,WAAAb,CAAA;MACAA,CAAA,GAAAA,CAAA,IAAAC,KAAA;MACAD,CAAA,CAAAE,cAAA;MACA,KAAArC,OAAA;MACA,IAAAmC,CAAA,CAAAc,OAAA,CAAAC,MAAA;QACA,IAAAZ,GAAA;UACAC,CAAA,EAAAJ,CAAA,CAAAgB,aAAA,IAAAC,OAAA,QAAAzC,KAAA,CAAAC,MAAA,CAAAC,qBAAA,GAAAwC,IAAA;UACAZ,CAAA,EAAAN,CAAA,CAAAgB,aAAA,IAAAG,OAAA,QAAA3C,KAAA,CAAAC,MAAA,CAAAC,qBAAA,GAAA0C;QACA;QACA,KAAAZ,SAAA,CAAAL,GAAA;MACA;IACA;IACAkB,UAAArB,CAAA;MACAA,CAAA,GAAAA,CAAA,IAAAC,KAAA;MACAD,CAAA,CAAAE,cAAA;MACA,IAAAF,CAAA,CAAAc,OAAA,CAAAC,MAAA;QACA,IAAAZ,GAAA;UACAC,CAAA,EAAAJ,CAAA,CAAAgB,aAAA,IAAAC,OAAA,QAAAzC,KAAA,CAAAC,MAAA,CAAAC,qBAAA,GAAAwC,IAAA;UACAZ,CAAA,EAAAN,CAAA,CAAAgB,aAAA,IAAAG,OAAA,QAAA3C,KAAA,CAAAC,MAAA,CAAAC,qBAAA,GAAA0C;QACA;QACA,KAAAV,QAAA,CAAAP,GAAA;MACA;IACA;IACAmB,SAAAtB,CAAA;MACAA,CAAA,GAAAA,CAAA,IAAAC,KAAA;MACAD,CAAA,CAAAE,cAAA;MACA,IAAAF,CAAA,CAAAc,OAAA,CAAAC,MAAA;QACA,IAAAZ,GAAA;UACAC,CAAA,EAAAJ,CAAA,CAAAgB,aAAA,IAAAC,OAAA,QAAAzC,KAAA,CAAAC,MAAA,CAAAC,qBAAA,GAAAwC,IAAA;UACAZ,CAAA,EAAAN,CAAA,CAAAgB,aAAA,IAAAG,OAAA,QAAA3C,KAAA,CAAAC,MAAA,CAAAC,qBAAA,GAAA0C;QACA;QACA,KAAAR,OAAA,CAAAT,GAAA;MACA;IACA;IACA;IACAK,UAAAL,GAAA;MACA,KAAAlC,MAAA,GAAAkC,GAAA,CAAAC,CAAA;MACA,KAAAlC,MAAA,GAAAiC,GAAA,CAAAG,CAAA;MACA,KAAAtC,SAAA,CAAAuD,SAAA;MACA,KAAAvD,SAAA,CAAAwD,MAAA,MAAAvD,MAAA,OAAAC,MAAA;MACA,KAAAF,SAAA,CAAAyD,MAAA,CAAAtB,GAAA,CAAAC,CAAA,EAAAD,GAAA,CAAAG,CAAA;MACA,KAAAtC,SAAA,CAAA0D,OAAA;MACA,KAAA1D,SAAA,CAAA2D,QAAA;MACA,KAAA3D,SAAA,CAAAb,SAAA,QAAAA,SAAA,QAAAiB,MAAA;MACA,KAAAJ,SAAA,CAAA4D,MAAA;MACA,KAAA5D,SAAA,CAAA6D,SAAA;MACA,KAAA9D,MAAA,CAAA+D,IAAA,CAAA3B,GAAA;IACA;IACAO,SAAAP,GAAA;MACA,KAAAnC,SAAA,CAAAuD,SAAA;MACA,KAAAvD,SAAA,CAAAwD,MAAA,MAAAvD,MAAA,OAAAC,MAAA;MACA,KAAAF,SAAA,CAAAyD,MAAA,CAAAtB,GAAA,CAAAC,CAAA,EAAAD,GAAA,CAAAG,CAAA;MACA,KAAAtC,SAAA,CAAA+D,WAAA,QAAA3E,SAAA;MACA,KAAAY,SAAA,CAAAb,SAAA,QAAAA,SAAA,QAAAiB,MAAA;MACA,KAAAJ,SAAA,CAAA0D,OAAA;MACA,KAAA1D,SAAA,CAAA2D,QAAA;MACA,KAAA3D,SAAA,CAAA4D,MAAA;MACA,KAAA5D,SAAA,CAAA6D,SAAA;MACA,KAAA3D,MAAA,GAAAiC,GAAA,CAAAG,CAAA;MACA,KAAArC,MAAA,GAAAkC,GAAA,CAAAC,CAAA;MACA,KAAArC,MAAA,CAAA+D,IAAA,CAAA3B,GAAA;IACA;IACAS,QAAAT,GAAA;MACA,KAAAnC,SAAA,CAAAuD,SAAA;MACA,KAAAvD,SAAA,CAAAwD,MAAA,MAAAvD,MAAA,OAAAC,MAAA;MACA,KAAAF,SAAA,CAAAyD,MAAA,CAAAtB,GAAA,CAAAC,CAAA,EAAAD,GAAA,CAAAG,CAAA;MACA,KAAAtC,SAAA,CAAA0D,OAAA;MACA,KAAA1D,SAAA,CAAA2D,QAAA;MACA,KAAA3D,SAAA,CAAA4D,MAAA;MACA,KAAA5D,SAAA,CAAA6D,SAAA;MACA,KAAA9D,MAAA,CAAA+D,IAAA,CAAA3B,GAAA;MACA,KAAApC,MAAA,CAAA+D,IAAA;QAAA1B,CAAA;QAAAE,CAAA;MAAA;IACA;IACA;IACA0B,SAAAC,OAAA;MACA,IAAAC,SAAA,GAAAD,OAAA,IAAAA,OAAA,CAAAvE,MAAA,GAAAuE,OAAA,CAAAvE,MAAA,QAAAA,MAAA;MACA,IAAAyE,UAAA,GAAAF,OAAA,IAAAA,OAAA,CAAAtE,OAAA,GAAAsE,OAAA,CAAAtE,OAAA,QAAAA,OAAA;MACA,MAAAyE,EAAA,OAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA;QACA,UAAA1E,OAAA;UACA0E,MAAA;UACA;QACA;QACA,IAAAC,UAAA,QAAAxE,SAAA,CAAAyE,YAAA,YAAAjE,KAAA,CAAAC,MAAA,CAAA3B,KAAA,OAAA0B,KAAA,CAAAC,MAAA,CAAAvB,MAAA;QACA,KAAAc,SAAA,CAAA0E,wBAAA;QACA,KAAA1E,SAAA,CAAA2E,SAAA,QAAAhE,IAAA;QACA,KAAAX,SAAA,CAAA4E,QAAA,YAAApE,KAAA,CAAAC,MAAA,CAAA3B,KAAA,OAAA0B,KAAA,CAAAC,MAAA,CAAAvB,MAAA;QACA,KAAAY,SAAA,QAAAU,KAAA,CAAAC,MAAA,CAAAoE,SAAA,CAAAX,SAAA,EAAAC,UAAA;QACA,IAAArE,SAAA,QAAAA,SAAA;QACA,KAAAE,SAAA,CAAA8E,SAAA,YAAAtE,KAAA,CAAAC,MAAA,CAAA3B,KAAA,OAAA0B,KAAA,CAAAC,MAAA,CAAAvB,MAAA;QACA,KAAAc,SAAA,CAAA+E,YAAA,CAAAP,UAAA;QACA,KAAAxE,SAAA,CAAA0E,wBAAA;QACA,SAAAnF,MAAA;UACA,MAAAyF,SAAA,QAAAC,WAAA,CAAAT,UAAA,CAAA5E,IAAA;UACA,IAAAsF,WAAA,GAAA3D,QAAA,CAAA4D,aAAA;UACA,MAAAC,QAAA,GAAAF,WAAA,CAAArD,UAAA;UACAqD,WAAA,CAAApG,KAAA,GAAAkG,SAAA,MAAAA,SAAA;UACAE,WAAA,CAAAhG,MAAA,GAAA8F,SAAA,MAAAA,SAAA;UACA,MAAAK,YAAA,QAAArF,SAAA,CAAAyE,YAAA,IAAAO,SAAA;UACAI,QAAA,CAAAV,wBAAA;UACAU,QAAA,CAAAL,YAAA,CAAAM,YAAA;UACAD,QAAA,CAAAT,SAAA,QAAAhE,IAAA;UACAyE,QAAA,CAAAR,QAAA,OAAAM,WAAA,CAAApG,KAAA,EAAAoG,WAAA,CAAAhG,MAAA;UACAY,SAAA,GAAAoF,WAAA,CAAAL,SAAA,CAAAX,SAAA,EAAAC,UAAA;UACAe,WAAA;QACA;QACAZ,OAAA,CAAAxE,SAAA;MACA;MACA,OAAAsE,EAAA;IACA;IACAkB,MAAA;MACA,KAAAtF,SAAA,CAAA8E,SAAA,CACA,GACA,GACA,KAAAtE,KAAA,CAAAC,MAAA,CAAA3B,KAAA,EACA,KAAA0B,KAAA,CAAAC,MAAA,CAAAvB,MACA;MACA,SAAAO,cAAA;QACA,KAAA8F,KAAA;QACA,KAAA/E,KAAA,CAAAC,MAAA,CAAAK,KAAA,CAAAC,UAAA;MACA;MACA,KAAAhB,MAAA;MACA,KAAAF,OAAA;MACA,KAAAC,SAAA;IACA;IACAmF,YAAAO,OAAA;MACA,IAAAC,IAAA,QAAAjF,KAAA,CAAAC,MAAA,CAAA3B,KAAA;MAAA,IAAA4G,IAAA;MAAA,IAAAC,IAAA,QAAAnF,KAAA,CAAAC,MAAA,CAAAvB,MAAA;MAAA,IAAA0G,IAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,QAAArF,KAAA,CAAAC,MAAA,CAAA3B,KAAA,EAAA+G,CAAA;QACA,SAAAC,CAAA,MAAAA,CAAA,QAAAtF,KAAA,CAAAC,MAAA,CAAAvB,MAAA,EAAA4G,CAAA;UACA,IAAAC,GAAA,IAAAF,CAAA,QAAArF,KAAA,CAAAC,MAAA,CAAA3B,KAAA,GAAAgH,CAAA;UACA,IAAAN,OAAA,CAAAO,GAAA,SAAAP,OAAA,CAAAO,GAAA,aAAAP,OAAA,CAAAO,GAAA,SAAAP,OAAA,CAAAO,GAAA;YACAH,IAAA,GAAAI,IAAA,CAAAC,GAAA,CAAAH,CAAA,EAAAF,IAAA;YACAF,IAAA,GAAAM,IAAA,CAAAC,GAAA,CAAAJ,CAAA,EAAAH,IAAA;YACAC,IAAA,GAAAK,IAAA,CAAAE,GAAA,CAAAJ,CAAA,EAAAH,IAAA;YACAF,IAAA,GAAAO,IAAA,CAAAE,GAAA,CAAAL,CAAA,EAAAJ,IAAA;UACA;QACA;MACA;MACAA,IAAA;MACAC,IAAA;MACAC,IAAA;MACAC,IAAA;MACA,MAAAhG,IAAA,IAAA6F,IAAA,EAAAE,IAAA,EAAAD,IAAA,EAAAE,IAAA;MACA,OAAAhG,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}