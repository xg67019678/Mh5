{"ast":null,"code":"import _mergeJSXProps2 from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport { createNamespace, isDef, addUnit } from '../utils';\nimport { resetScroll } from '../utils/dom/reset-scroll';\nimport { preventDefault } from '../utils/dom/event';\nimport { addNumber, formatNumber as _formatNumber } from '../utils/format/number';\nimport { isNaN } from '../utils/validate/number';\nimport { FieldMixin } from '../mixins/field';\nvar _createNamespace = createNamespace('stepper'),\n  createComponent = _createNamespace[0],\n  bem = _createNamespace[1];\nvar LONG_PRESS_START_TIME = 600;\nvar LONG_PRESS_INTERVAL = 200;\nfunction equal(value1, value2) {\n  return String(value1) === String(value2);\n}\nexport default createComponent({\n  mixins: [FieldMixin],\n  props: {\n    value: null,\n    theme: String,\n    integer: Boolean,\n    disabled: Boolean,\n    allowEmpty: Boolean,\n    inputWidth: [Number, String],\n    buttonSize: [Number, String],\n    asyncChange: Boolean,\n    placeholder: String,\n    disablePlus: Boolean,\n    disableMinus: Boolean,\n    disableInput: Boolean,\n    decimalLength: [Number, String],\n    name: {\n      type: [Number, String],\n      default: ''\n    },\n    min: {\n      type: [Number, String],\n      default: 1\n    },\n    max: {\n      type: [Number, String],\n      default: Infinity\n    },\n    step: {\n      type: [Number, String],\n      default: 1\n    },\n    defaultValue: {\n      type: [Number, String],\n      default: 1\n    },\n    showPlus: {\n      type: Boolean,\n      default: true\n    },\n    showMinus: {\n      type: Boolean,\n      default: true\n    },\n    showInput: {\n      type: Boolean,\n      default: true\n    },\n    longPress: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    var _this$value;\n    var defaultValue = (_this$value = this.value) != null ? _this$value : this.defaultValue;\n    var value = this.format(defaultValue);\n    if (!equal(value, this.value)) {\n      this.$emit('input', value);\n    }\n    return {\n      currentValue: value\n    };\n  },\n  computed: {\n    minusDisabled: function minusDisabled() {\n      return this.disabled || this.disableMinus || this.currentValue <= +this.min;\n    },\n    plusDisabled: function plusDisabled() {\n      return this.disabled || this.disablePlus || this.currentValue >= +this.max;\n    },\n    inputStyle: function inputStyle() {\n      var style = {};\n      if (this.inputWidth) {\n        style.width = addUnit(this.inputWidth);\n      }\n      if (this.buttonSize) {\n        style.height = addUnit(this.buttonSize);\n      }\n      return style;\n    },\n    buttonStyle: function buttonStyle() {\n      if (this.buttonSize) {\n        var size = addUnit(this.buttonSize);\n        return {\n          width: size,\n          height: size\n        };\n      }\n    }\n  },\n  watch: {\n    max: 'check',\n    min: 'check',\n    integer: 'check',\n    decimalLength: 'check',\n    value: function value(val) {\n      if (!equal(val, this.currentValue)) {\n        this.currentValue = this.format(val);\n      }\n    },\n    currentValue: function currentValue(val) {\n      this.$emit('input', val);\n      this.$emit('change', val, {\n        name: this.name\n      });\n    }\n  },\n  methods: {\n    check: function check() {\n      var val = this.format(this.currentValue);\n      if (!equal(val, this.currentValue)) {\n        this.currentValue = val;\n      }\n    },\n    // formatNumber illegal characters\n    formatNumber: function formatNumber(value) {\n      return _formatNumber(String(value), !this.integer);\n    },\n    format: function format(value) {\n      if (this.allowEmpty && value === '') {\n        return value;\n      }\n      value = this.formatNumber(value); // format range\n\n      value = value === '' ? 0 : +value;\n      value = isNaN(value) ? this.min : value;\n      value = Math.max(Math.min(this.max, value), this.min); // format decimal\n\n      if (isDef(this.decimalLength)) {\n        value = value.toFixed(this.decimalLength);\n      }\n      return value;\n    },\n    onInput: function onInput(event) {\n      var value = event.target.value;\n      var formatted = this.formatNumber(value); // limit max decimal length\n\n      if (isDef(this.decimalLength) && formatted.indexOf('.') !== -1) {\n        var pair = formatted.split('.');\n        formatted = pair[0] + \".\" + pair[1].slice(0, this.decimalLength);\n      }\n      if (!equal(value, formatted)) {\n        event.target.value = formatted;\n      } // prefer number type\n\n      if (formatted === String(+formatted)) {\n        formatted = +formatted;\n      }\n      this.emitChange(formatted);\n    },\n    emitChange: function emitChange(value) {\n      if (this.asyncChange) {\n        this.$emit('input', value);\n        this.$emit('change', value, {\n          name: this.name\n        });\n      } else {\n        this.currentValue = value;\n      }\n    },\n    onChange: function onChange() {\n      var type = this.type;\n      if (this[type + \"Disabled\"]) {\n        this.$emit('overlimit', type);\n        return;\n      }\n      var diff = type === 'minus' ? -this.step : +this.step;\n      var value = this.format(addNumber(+this.currentValue, diff));\n      this.emitChange(value);\n      this.$emit(type);\n    },\n    onFocus: function onFocus(event) {\n      // readonly not work in legacy mobile safari\n      if (this.disableInput && this.$refs.input) {\n        this.$refs.input.blur();\n      } else {\n        this.$emit('focus', event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      var value = this.format(event.target.value);\n      event.target.value = value;\n      this.emitChange(value);\n      this.$emit('blur', event);\n      resetScroll();\n    },\n    longPressStep: function longPressStep() {\n      var _this = this;\n      this.longPressTimer = setTimeout(function () {\n        _this.onChange();\n        _this.longPressStep(_this.type);\n      }, LONG_PRESS_INTERVAL);\n    },\n    onTouchStart: function onTouchStart() {\n      var _this2 = this;\n      if (!this.longPress) {\n        return;\n      }\n      clearTimeout(this.longPressTimer);\n      this.isLongPress = false;\n      this.longPressTimer = setTimeout(function () {\n        _this2.isLongPress = true;\n        _this2.onChange();\n        _this2.longPressStep();\n      }, LONG_PRESS_START_TIME);\n    },\n    onTouchEnd: function onTouchEnd(event) {\n      if (!this.longPress) {\n        return;\n      }\n      clearTimeout(this.longPressTimer);\n      if (this.isLongPress) {\n        preventDefault(event);\n      }\n    },\n    onMousedown: function onMousedown(event) {\n      // fix mobile safari page scroll down issue\n      // see: https://github.com/vant-ui/vant/issues/7690\n      if (this.disableInput) {\n        event.preventDefault();\n      }\n    }\n  },\n  render: function render() {\n    var _this3 = this;\n    var h = arguments[0];\n    var createListeners = function createListeners(type) {\n      return {\n        on: {\n          click: function click(e) {\n            // disable double tap scrolling on mobile safari\n            e.preventDefault();\n            _this3.type = type;\n            _this3.onChange();\n          },\n          touchstart: function touchstart() {\n            _this3.type = type;\n            _this3.onTouchStart();\n          },\n          touchend: _this3.onTouchEnd,\n          touchcancel: _this3.onTouchEnd\n        }\n      };\n    };\n    return h(\"div\", {\n      \"class\": bem([this.theme])\n    }, [h(\"button\", _mergeJSXProps([{\n      \"directives\": [{\n        name: \"show\",\n        value: this.showMinus\n      }],\n      \"attrs\": {\n        \"type\": \"button\"\n      },\n      \"style\": this.buttonStyle,\n      \"class\": bem('minus', {\n        disabled: this.minusDisabled\n      })\n    }, createListeners('minus')])), h(\"input\", {\n      \"directives\": [{\n        name: \"show\",\n        value: this.showInput\n      }],\n      \"ref\": \"input\",\n      \"attrs\": {\n        \"type\": this.integer ? 'tel' : 'text',\n        \"role\": \"spinbutton\",\n        \"disabled\": this.disabled,\n        \"readonly\": this.disableInput,\n        \"inputmode\": this.integer ? 'numeric' : 'decimal',\n        \"placeholder\": this.placeholder,\n        \"aria-valuemax\": this.max,\n        \"aria-valuemin\": this.min,\n        \"aria-valuenow\": this.currentValue\n      },\n      \"class\": bem('input'),\n      \"domProps\": {\n        \"value\": this.currentValue\n      },\n      \"style\": this.inputStyle,\n      \"on\": {\n        \"input\": this.onInput,\n        \"focus\": this.onFocus,\n        \"blur\": this.onBlur,\n        \"mousedown\": this.onMousedown\n      }\n    }), h(\"button\", _mergeJSXProps2([{\n      \"directives\": [{\n        name: \"show\",\n        value: this.showPlus\n      }],\n      \"attrs\": {\n        \"type\": \"button\"\n      },\n      \"style\": this.buttonStyle,\n      \"class\": bem('plus', {\n        disabled: this.plusDisabled\n      })\n    }, createListeners('plus')]))]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}