{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst getStorgeSearchData = () => {\n  const storgeData = localStorage.getItem('searchHistory');\n  return storgeData && storgeData.length ? JSON.parse(storgeData) : [];\n};\nconst hasInArr = (arr, val) => {\n  if (arr.length) {\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i].goodsId === val.goodsId) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n};\nexport default {\n  state: {\n    searchHistory: [],\n    audioPlay: true,\n    app_domain: ''\n  },\n  getters: {\n    searchHistory: state => {\n      return state.searchHistory.length ? state.searchHistory : getStorgeSearchData();\n    }\n  },\n  mutations: {\n    SET_SEARCH_HISTORY: (state, arr) => {\n      const arrStr = JSON.stringify(arr);\n      state.searchHistory = arr;\n      localStorage.setItem('searchHistory', arrStr);\n    },\n    CLEAR_SEARCH_HISTORY: state => {\n      state.searchHistory = [];\n      localStorage.removeItem('searchHistory');\n    }\n  },\n  actions: {\n    setSearchHistory: ({\n      commit,\n      state\n    }, val) => {\n      const storeData = state.searchHistory.length ? state.searchHistory : getStorgeSearchData();\n      const data = [...storeData];\n      if (!hasInArr(storeData, val)) {\n        data.push(val);\n      }\n      commit('SET_SEARCH_HISTORY', data);\n    },\n    clearSearchHistory: ({\n      commit\n    }) => {\n      commit('CLEAR_SEARCH_HISTORY');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}