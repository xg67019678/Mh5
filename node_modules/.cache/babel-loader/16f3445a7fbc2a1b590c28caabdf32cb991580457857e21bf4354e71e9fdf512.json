{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Vue from 'vue';\nimport VueToast from './Toast';\nimport { isObject, isServer } from '../utils';\nimport { removeNode } from '../utils/dom/node';\nvar defaultOptions = {\n  icon: '',\n  type: 'text',\n  // @deprecated\n  mask: false,\n  value: true,\n  message: '',\n  className: '',\n  overlay: false,\n  onClose: null,\n  onOpened: null,\n  duration: 2000,\n  iconPrefix: undefined,\n  position: 'middle',\n  transition: 'van-fade',\n  forbidClick: false,\n  loadingType: undefined,\n  getContainer: 'body',\n  overlayStyle: null,\n  closeOnClick: false,\n  closeOnClickOverlay: false\n}; // default options of specific type\n\nvar defaultOptionsMap = {};\nvar queue = [];\nvar multiple = false;\nvar currentOptions = _extends({}, defaultOptions);\nfunction parseOptions(message) {\n  if (isObject(message)) {\n    return message;\n  }\n  return {\n    message: message\n  };\n}\nfunction isInDocument(element) {\n  return document.body.contains(element);\n}\nfunction createInstance() {\n  /* istanbul ignore if */\n  if (isServer) {\n    return {};\n  }\n  queue = queue.filter(function (item) {\n    return !item.$el.parentNode || isInDocument(item.$el);\n  });\n  if (!queue.length || multiple) {\n    var toast = new (Vue.extend(VueToast))({\n      el: document.createElement('div')\n    });\n    toast.$on('input', function (value) {\n      toast.value = value;\n    });\n    queue.push(toast);\n  }\n  return queue[queue.length - 1];\n} // transform toast options to popup props\n\nfunction transformOptions(options) {\n  return _extends({}, options, {\n    overlay: options.mask || options.overlay,\n    mask: undefined,\n    duration: undefined\n  });\n}\nfunction Toast(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var toast = createInstance(); // should add z-index if previous toast has not disappeared\n\n  if (toast.value) {\n    toast.updateZIndex();\n  }\n  options = parseOptions(options);\n  options = _extends({}, currentOptions, defaultOptionsMap[options.type || currentOptions.type], options);\n  if (process.env.NODE_ENV === 'development' && options.mask) {\n    console.warn('[Vant] Toast: \"mask\" option is deprecated, use \"overlay\" option instead.');\n  }\n  options.clear = function () {\n    toast.value = false;\n    if (options.onClose) {\n      options.onClose();\n      options.onClose = null;\n    }\n    if (multiple && !isServer) {\n      toast.$on('closed', function () {\n        clearTimeout(toast.timer);\n        queue = queue.filter(function (item) {\n          return item !== toast;\n        });\n        removeNode(toast.$el);\n        toast.$destroy();\n      });\n    }\n  };\n  _extends(toast, transformOptions(options));\n  clearTimeout(toast.timer);\n  if (options.duration > 0) {\n    toast.timer = setTimeout(function () {\n      toast.clear();\n    }, options.duration);\n  }\n  return toast;\n}\nvar createMethod = function createMethod(type) {\n  return function (options) {\n    return Toast(_extends({\n      type: type\n    }, parseOptions(options)));\n  };\n};\n['loading', 'success', 'fail'].forEach(function (method) {\n  Toast[method] = createMethod(method);\n});\nToast.clear = function (all) {\n  if (queue.length) {\n    if (all) {\n      queue.forEach(function (toast) {\n        toast.clear();\n      });\n      queue = [];\n    } else if (!multiple) {\n      queue[0].clear();\n    } else {\n      queue.shift().clear();\n    }\n  }\n};\nToast.setDefaultOptions = function (type, options) {\n  if (typeof type === 'string') {\n    defaultOptionsMap[type] = options;\n  } else {\n    _extends(currentOptions, type);\n  }\n};\nToast.resetDefaultOptions = function (type) {\n  if (typeof type === 'string') {\n    defaultOptionsMap[type] = null;\n  } else {\n    currentOptions = _extends({}, defaultOptions);\n    defaultOptionsMap = {};\n  }\n};\nToast.allowMultiple = function (value) {\n  if (value === void 0) {\n    value = true;\n  }\n  multiple = value;\n};\nToast.install = function () {\n  Vue.use(VueToast);\n};\nVue.prototype.$toast = Toast;\nexport default Toast;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}