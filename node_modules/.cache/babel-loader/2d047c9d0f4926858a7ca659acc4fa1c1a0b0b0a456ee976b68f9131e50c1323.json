{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport store from '@/store';\nimport moment from \"moment-timezone\";\nimport dayjs from 'dayjs';\nimport i18n from \"@/i18n\";\nexport const getUrlVal = name => {\n  let url = location.href;\n  let urlStr = url?.split('?')[1];\n  // 创建空对象存储参数\n  let obj = {};\n  // 再通过 & 将每一个参数单独分割出来\n  let paramsArr = urlStr?.split('&');\n  if (paramsArr) {\n    for (let i = 0, len = paramsArr?.length; i < len; i++) {\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      let arr = paramsArr[i]?.split('=');\n      obj[arr[0]] = arr[1];\n    }\n  }\n  return obj[name];\n};\n/**\n * \n *  判断是否是手机端\n */\nexport const is_mobile = () => {\n  var regex_match = /(nokia|iphone|android|motorola|^mot-|softbank|foma|docomo|kddi|up.browser|up.link|htc|dopod|blazer|netfront|helio|hosin|huawei|novarra|CoolPad|webos|techfaith|palmsource|blackberry|alcatel|amoi|ktouch|nexian|samsung|^sam-|s[cg]h|^lge|ericsson|philips|sagem|wellcom|bunjalloo|maui|symbian|smartphone|midp|wap|phone|windows ce|iemobile|^spice|^bird|^zte-|longcos|pantech|gionee|^sie-|portalmmm|jigs browser|hiptop|^benq|haier|^lct|operas*mobi|opera*mini|320x320|240x320|176x220)/i;\n  var u = navigator.userAgent;\n  if (null == u) {\n    return true;\n  }\n  var result = regex_match.exec(u);\n  if (null == result) {\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\n * @description 时间格式处理\n */\nexport const formatData = data => {\n  let thisData = formatTime(new Date(), \"yyyy-MM-dd hh:mm:ss\");\n  let myData = data.substr(0, 10);\n  if (thisData == myData) {\n    let Time = data.substr(11, 5);\n    return Time;\n  } else {\n    if (thisData.substr(0, 4) == myData.substr(0, 4) && thisData != myData) {\n      let Data = data.substr(5, 11);\n      return Data;\n    } else {\n      let Year = myData;\n      return Year;\n    }\n  }\n};\n\n/**\n * @description 时间格式转化\n * @param {String} date 日期\n * @param {String} fmt 需要的格式\n */\nexport const formatTime = (date, fmt) => {\n  let o = {\n    \"M+\": date.getMonth() + 1,\n    //月份\n    \"d+\": date.getDate(),\n    //日\n    \"h+\": date.getHours(),\n    //小时\n    \"m+\": date.getMinutes(),\n    //分\n    \"s+\": date.getSeconds(),\n    //秒\n    \"q+\": Math.floor((date.getMonth() + 3) / 3),\n    //季度\n    \"S\": date.getMilliseconds() //毫秒\n  };\n  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n  for (let k in o) if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n  return fmt;\n};\n\n/**\n * @description 验证手机号格式是否正确\n * @param {String} mobile 电话号码\n */\nexport const checkMobileformat = mobile => /^1[345789]\\d{9}$/.test(mobile);\n\n/**\n * @description Array clear empty item.\n * @param {Array} array\n */\nexport const arrayClearEmptyItem = array => {\n  return array.filter(item => item);\n};\n\n/**\n * @description 判断一个日期是过去还是未来\n * @param {String} d 要判断的日期\n * @returns past => false   future => true\n */\nexport const judgeDateIsPastOrFuture = d => {\n  if (!d) {\n    return false;\n  }\n  const nowDate = new Date();\n  const nowTimeStamp = nowDate.getTime();\n  const date = new Date(d.replace(/-/g, \"/\"));\n  const dateTimeStamp = date.getTime();\n  return nowTimeStamp < dateTimeStamp;\n};\n\n/**\n * @description 判断一个字符串中是否有重复的项（0-9, a-z, A-Z）\n * @param {String} str 判断的目标字符串\n * @returns {Boolean} true: 有重复项   false: 无重复项\n */\nexport const strIsReplace = str => {\n  const passwordRule = /[0-9a-zA-Z]/;\n  const arr = str.split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n    if (passwordRule.test(element)) {\n      if (i === arr.length - 1) {\n        return false;\n      }\n      if (str.includes(element, i + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n// 设置localStorage\nexport const setStorage = function (key, obj) {\n  let json = JSON.stringify(obj);\n  window.localStorage.setItem(key, json);\n};\n\n// 获取localStorage\nexport const getStorage = function (key) {\n  const str = window.localStorage.getItem(key);\n  if (!str) {\n    return null;\n  }\n  return str;\n};\n\n// 移除localStorage\nexport const removeStorage = function (key) {\n  window.localStorage.removeItem(key);\n};\n\n// 获取浏览器默认语言\nexport const getBrowserLang = function () {\n  let browserLang = navigator.language ? navigator.language : navigator.browserLanguage;\n  let defaultBrowserLang = '';\n  if (browserLang?.toLowerCase() === 'cn' || browserLang?.toLowerCase() === 'zh' || browserLang?.toLowerCase() === 'cn') {\n    defaultBrowserLang = 'cn';\n  } else {\n    defaultBrowserLang = 'en';\n  }\n  return defaultBrowserLang;\n};\n\n// 是否登录\nexport const isLogin = () => {\n  return store.getters.userInfo && localStorage.getItem('token');\n};\n\n// 图片地址\nexport const getImgUrl = path => {\n  return `https://www.tkshouppig.com/wap/public/showimg!showImg.action?imagePath=${path}`;\n};\n\n/**\n * 数字千位符格式化\n * eg:\n * 17267737 -> 17,267,737\n */\nexport const priceFormat = (num, int) => {\n  if (num && Number(num)) {\n    const numStr = _toFixed(num, 2);\n    const numPre = numStr.slice(0, numStr.indexOf('.'));\n    const numRi = numStr.slice(numStr.indexOf('.') + 1);\n    const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00';\n    return int ? `${intStr}` : `${intStr}${floatStr}`;\n  } else {\n    return 0;\n  }\n};\nexport const priceFormat8 = (num, int) => {\n  if (num && Number(num)) {\n    const numStr = _toFixed(num, 10);\n    const numPre = numStr.slice(0, numStr.indexOf('.'));\n    const numRi = numStr.slice(numStr.indexOf('.') + 1);\n    const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00';\n    return int ? `${intStr}` : `${intStr}${floatStr}`;\n  } else {\n    return 0;\n  }\n};\nexport const priceFormatInt = num => {\n  if (num && Number(num)) {\n    const numStr = _toFixed(num, 2);\n    const numPre = numStr.slice(0, numStr.indexOf('.'));\n    const numRi = numStr.slice(numStr.indexOf('.') + 1);\n    const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00';\n    return intStr;\n  } else {\n    return 0;\n  }\n};\nexport const formatZoneDate = time => {\n  if (!time) return '--';\n  //设置服务器默认时区\n  moment.tz.setDefault('Asia/Shanghai');\n  time = moment(time);\n  //获取当前时区\n  let timezone = moment.tz.guess(true);\n  //time转成当前时区的时间\n  time = moment.tz(time, timezone).format('YYYY-MM-DD HH:mm:ss');\n  return time;\n};\n// 不要四舍五入 直接截取\nconst _toFixed = (num, decimal) => {\n  num = num.toString();\n  let index = num.indexOf('.');\n  if (index !== -1) {\n    num = num.substring(0, decimal + index + 1);\n  } else {\n    num = num.substring(0);\n  }\n  return parseFloat(num).toFixed(decimal);\n};\n\n/**\n * 身份证/护照号码验证\n * 验证字母或者数字\n */\n\nexport const isAlphanumeric = str => {\n  return /^[a-zA-Z0-9]+$/.test(str);\n};\n\n// 数组对象去重\nexport const deduplication = (arr, key) => {\n  const res = new Map();\n  return arr.filter(arr => !res.has(arr[key]) && res.set(arr[key], 1));\n};\n\n/**\n* 仿照微信中的消息时间显示逻辑，将时间戳（单位：毫秒）转换为友好的显示格式.\n*\n* 1）7天之内的日期显示逻辑是：今天、昨天(-1d)、前天(-2d)、星期？（只显示总计7天之内的星期数，即<=-4d）；\n* 2）7天之外（即>7天）的逻辑：直接显示完整日期时间。\n*\n* @param  {[long]} timestamp 时间戳（单位：毫秒），形如：1550789954260\n* @param {boolean} mustIncludeTime true表示输出的格式里一定会包含“时间:分钟”\n* ，否则不包含（参考微信，不包含时分的情况，用于首页“消息”中显示时）\n*\n* @return {string} 输出格式形如：“刚刚”、“10:30”、“昨天 12:04”、“前天 20:51”、“星期二”、“2019/2/21 12:09”等形式\n* @since 1.1\n*/\nexport const shourtTimeString = date => {\n  const dateTime = dayjs(date);\n  const diffMinute = (dayjs().unix() - dateTime.unix()) / 60;\n  const diffDays = Math.floor(diffMinute / (60 * 24));\n  // const utcDay = dateTime.utc().tz();\n  if (diffDays === 0) {\n    if (diffMinute < 5) {\n      return i18n.i18n.t('just');\n    }\n    return dateTime.format('HH:mm');\n  } else if (diffDays === 1) {\n    return i18n.i18n.t('yesterday');\n  } else if (diffDays === 2) {\n    return i18n.i18n.t('beforeYesterday');\n  } else if (diffDays >= 3 && diffDays <= 6) {\n    const weeks = [i18n.i18n.t('sunday'), i18n.i18n.t('monday'), i18n.i18n.t('tuesday'), i18n.i18n.t('wednesday'), i18n.i18n.t('thursday'), i18n.i18n.t('friday'), i18n.i18n.t('saturday')];\n    return weeks[dateTime.day()];\n  }\n  return dateTime.format('MM-DD');\n};","map":{"version":3,"names":["store","moment","dayjs","i18n","getUrlVal","name","url","location","href","urlStr","split","obj","paramsArr","i","len","length","arr","is_mobile","regex_match","u","navigator","userAgent","result","exec","formatData","data","thisData","formatTime","Date","myData","substr","Time","Data","Year","date","fmt","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","test","replace","RegExp","$1","getFullYear","k","checkMobileformat","mobile","arrayClearEmptyItem","array","filter","item","judgeDateIsPastOrFuture","d","nowDate","nowTimeStamp","getTime","dateTimeStamp","strIsReplace","str","passwordRule","element","includes","setStorage","key","json","JSON","stringify","window","localStorage","setItem","getStorage","getItem","removeStorage","removeItem","getBrowserLang","browserLang","language","browserLanguage","defaultBrowserLang","toLowerCase","isLogin","getters","userInfo","getImgUrl","path","priceFormat","num","int","Number","numStr","_toFixed","numPre","slice","indexOf","numRi","intStr","toString","floatStr","priceFormat8","priceFormatInt","formatZoneDate","time","tz","setDefault","timezone","guess","format","decimal","index","substring","parseFloat","toFixed","isAlphanumeric","deduplication","res","Map","has","set","shourtTimeString","dateTime","diffMinute","unix","diffDays","t","weeks","day"],"sources":["C:/Users/xg670/Desktop/运行/mmh5/src/utils/utis.js"],"sourcesContent":["import store from '@/store'\nimport moment from \"moment-timezone\";\nimport dayjs from 'dayjs';\nimport i18n from \"@/i18n\";\n\nexport const getUrlVal = (name) => {\n    let url = location.href\n    let urlStr = url?.split('?')[1]\n    // 创建空对象存储参数\n    let obj = {};\n    // 再通过 & 将每一个参数单独分割出来\n    let paramsArr = urlStr?.split('&')\n    if (paramsArr) {\n        for (let i = 0, len = paramsArr?.length; i < len; i++) {\n            // 再通过 = 将每一个参数分割为 key:value 的形式\n            let arr = paramsArr[i]?.split('=')\n            obj[arr[0]] = arr[1];\n        }\n    }\n    return obj[name]\n}\n/**\n * \n *  判断是否是手机端\n */\nexport const is_mobile = () => {\n    var regex_match = /(nokia|iphone|android|motorola|^mot-|softbank|foma|docomo|kddi|up.browser|up.link|htc|dopod|blazer|netfront|helio|hosin|huawei|novarra|CoolPad|webos|techfaith|palmsource|blackberry|alcatel|amoi|ktouch|nexian|samsung|^sam-|s[cg]h|^lge|ericsson|philips|sagem|wellcom|bunjalloo|maui|symbian|smartphone|midp|wap|phone|windows ce|iemobile|^spice|^bird|^zte-|longcos|pantech|gionee|^sie-|portalmmm|jigs browser|hiptop|^benq|haier|^lct|operas*mobi|opera*mini|320x320|240x320|176x220)/i;\n    var u = navigator.userAgent;\n    if (null == u) {\n        return true;\n    }\n    var result = regex_match.exec(u);\n    if (null == result) {\n        return false\n    } else {\n        return true\n    }\n}\n/**\n * @description 时间格式处理\n */\nexport const formatData = (data) => {\n    let thisData = formatTime(new Date(), \"yyyy-MM-dd hh:mm:ss\");\n    let myData = data.substr(0, 10);\n    if (thisData == myData) {\n        let Time = data.substr(11, 5);\n        return Time\n    } else {\n        if (thisData.substr(0, 4) == myData.substr(0, 4) && thisData != myData) {\n            let Data = data.substr(5, 11);\n            return Data\n        } else {\n            let Year = myData;\n            return Year\n        }\n    }\n}\n\n/**\n * @description 时间格式转化\n * @param {String} date 日期\n * @param {String} fmt 需要的格式\n */\nexport const formatTime = (date, fmt) => {\n    let o = {\n        \"M+\": date.getMonth() + 1, //月份\n        \"d+\": date.getDate(), //日\n        \"h+\": date.getHours(), //小时\n        \"m+\": date.getMinutes(), //分\n        \"s+\": date.getSeconds(), //秒\n        \"q+\": Math.floor((date.getMonth() + 3) / 3), //季度\n        \"S\": date.getMilliseconds() //毫秒\n    };\n    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    for (let k in o)\n        if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\n    return fmt;\n}\n\n/**\n * @description 验证手机号格式是否正确\n * @param {String} mobile 电话号码\n */\nexport const checkMobileformat = mobile => /^1[345789]\\d{9}$/.test(mobile);\n\n/**\n * @description Array clear empty item.\n * @param {Array} array\n */\nexport const arrayClearEmptyItem = array => {\n    return array.filter(item => item);\n}\n\n/**\n * @description 判断一个日期是过去还是未来\n * @param {String} d 要判断的日期\n * @returns past => false   future => true\n */\nexport const judgeDateIsPastOrFuture = (d) => {\n    if (!d) {\n        return false;\n    }\n    const nowDate = new Date();\n    const nowTimeStamp = nowDate.getTime();\n    const date = new Date(d.replace(/-/g, \"/\"));\n    const dateTimeStamp = date.getTime();\n    return nowTimeStamp < dateTimeStamp;\n}\n\n/**\n * @description 判断一个字符串中是否有重复的项（0-9, a-z, A-Z）\n * @param {String} str 判断的目标字符串\n * @returns {Boolean} true: 有重复项   false: 无重复项\n */\nexport const strIsReplace = str => {\n    const passwordRule = /[0-9a-zA-Z]/;\n    const arr = str.split(\"\");\n    for (let i = 0; i < arr.length; i++) {\n        const element = arr[i];\n        if (passwordRule.test(element)) {\n            if (i === arr.length - 1) {\n                return false;\n            }\n            if (str.includes(element, i + 1)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n// 设置localStorage\nexport const setStorage = function (key, obj) {\n    let json = JSON.stringify(obj)\n    window.localStorage.setItem(key, json)\n}\n\n// 获取localStorage\nexport const getStorage = function (key) {\n    const str = window.localStorage.getItem(key)\n    if (!str) {\n        return null\n    }\n    return str\n}\n\n// 移除localStorage\nexport const removeStorage = function (key) {\n    window.localStorage.removeItem(key)\n}\n\n// 获取浏览器默认语言\nexport const getBrowserLang = function () {\n    let browserLang = navigator.language ? navigator.language : navigator.browserLanguage\n    let defaultBrowserLang = ''\n    if (browserLang?.toLowerCase() === 'cn' || browserLang?.toLowerCase() === 'zh' || browserLang?.toLowerCase() === 'cn') {\n        defaultBrowserLang = 'cn'\n    } else {\n        defaultBrowserLang = 'en'\n    }\n    return defaultBrowserLang\n}\n\n// 是否登录\nexport const isLogin = () => {\n    return store.getters.userInfo && localStorage.getItem('token')\n}\n\n// 图片地址\nexport const getImgUrl = (path) => {\n    return `https://www.tkshouppig.com/wap/public/showimg!showImg.action?imagePath=${path}`\n}\n\n/**\n * 数字千位符格式化\n * eg:\n * 17267737 -> 17,267,737\n */\nexport const priceFormat = (num, int) => {\n    if (num && Number(num)) {\n        const numStr = _toFixed(num, 2)\n        const numPre = numStr.slice(0, numStr.indexOf('.'))\n        const numRi = numStr.slice(numStr.indexOf('.') + 1)\n        const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n        const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00'\n        return int ? `${intStr}` : `${intStr}${floatStr}`\n    } else {\n        return 0\n    }\n}\nexport const priceFormat8 = (num, int) => {\n    if (num && Number(num)) {\n        const numStr = _toFixed(num, 10)\n        const numPre = numStr.slice(0, numStr.indexOf('.'))\n        const numRi = numStr.slice(numStr.indexOf('.') + 1)\n        const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n        const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00'\n        return int ? `${intStr}` : `${intStr}${floatStr}`\n    } else {\n        return 0\n    }\n}\nexport const priceFormatInt = (num) => {\n    if (num && Number(num)) {\n        const numStr = _toFixed(num, 2)\n        const numPre = numStr.slice(0, numStr.indexOf('.'))\n        const numRi = numStr.slice(numStr.indexOf('.') + 1)\n        const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n        const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00'\n        return intStr\n    } else {\n        return 0\n    }\n}\nexport const formatZoneDate = (time) => {\n    if (!time) return '--'\n    //设置服务器默认时区\n    moment.tz.setDefault('Asia/Shanghai')\n    time = moment(time)\n    //获取当前时区\n    let timezone = moment.tz.guess(true)\n    //time转成当前时区的时间\n    time = moment.tz(time, timezone).format('YYYY-MM-DD HH:mm:ss')\n    return time\n}\n// 不要四舍五入 直接截取\nconst _toFixed = (num, decimal) => {\n    num = num.toString();\n    let index = num.indexOf('.');\n    if (index !== -1) {\n        num = num.substring(0, decimal + index + 1)\n    } else {\n        num = num.substring(0)\n    }\n    return parseFloat(num).toFixed(decimal)\n}\n\n/**\n * 身份证/护照号码验证\n * 验证字母或者数字\n */\n\nexport const isAlphanumeric = (str) => {\n    return /^[a-zA-Z0-9]+$/.test(str);\n}\n\n// 数组对象去重\nexport const deduplication = (arr, key) => {\n    const res = new Map();\n    return arr.filter((arr) => !res.has(arr[key]) && res.set(arr[key], 1))\n}\n\n\n\n\n/**\n* 仿照微信中的消息时间显示逻辑，将时间戳（单位：毫秒）转换为友好的显示格式.\n*\n* 1）7天之内的日期显示逻辑是：今天、昨天(-1d)、前天(-2d)、星期？（只显示总计7天之内的星期数，即<=-4d）；\n* 2）7天之外（即>7天）的逻辑：直接显示完整日期时间。\n*\n* @param  {[long]} timestamp 时间戳（单位：毫秒），形如：1550789954260\n* @param {boolean} mustIncludeTime true表示输出的格式里一定会包含“时间:分钟”\n* ，否则不包含（参考微信，不包含时分的情况，用于首页“消息”中显示时）\n*\n* @return {string} 输出格式形如：“刚刚”、“10:30”、“昨天 12:04”、“前天 20:51”、“星期二”、“2019/2/21 12:09”等形式\n* @since 1.1\n*/\nexport const shourtTimeString = (date) => {\n\n    const dateTime = dayjs(date);\n    const diffMinute = (dayjs().unix() - dateTime.unix()) / 60;\n    const diffDays = Math.floor(diffMinute / (60 * 24))\n    // const utcDay = dateTime.utc().tz();\n    if (diffDays === 0) {\n        if (diffMinute < 5) {\n            return i18n.i18n.t('just')\n        }\n        return dateTime.format('HH:mm');\n    } else if (diffDays === 1) {\n        return i18n.i18n.t('yesterday');\n    } else if (diffDays === 2) {\n        return i18n.i18n.t('beforeYesterday');\n    } else if (diffDays >= 3 && diffDays <= 6) {\n        const weeks = [\n            i18n.i18n.t('sunday'),\n            i18n.i18n.t('monday'),\n            i18n.i18n.t('tuesday'),\n            i18n.i18n.t('wednesday'),\n            i18n.i18n.t('thursday'),\n            i18n.i18n.t('friday'),\n            i18n.i18n.t('saturday'),\n        ]\n        return weeks[dateTime.day()]\n    }\n\n    return dateTime.format('MM-DD')\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}