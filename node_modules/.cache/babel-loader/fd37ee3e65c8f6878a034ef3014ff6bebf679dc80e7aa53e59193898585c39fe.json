{"ast":null,"code":"import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport \"vant/es/number-keyboard/style\";\nimport _NumberKeyboard from \"vant/es/number-keyboard\";\nimport \"vant/es/password-input/style\";\nimport _PasswordInput from \"vant/es/password-input\";\nimport \"vant/es/dialog/style\";\nimport _Dialog from \"vant/es/dialog\";\nimport \"vant/es/overlay/style\";\nimport _Overlay from \"vant/es/overlay\";\nimport \"vant/es/uploader/style\";\nimport _Uploader from \"vant/es/uploader\";\nimport \"vant/es/tabs/style\";\nimport _Tabs from \"vant/es/tabs\";\nimport \"vant/es/tab/style\";\nimport _Tab from \"vant/es/tab\";\nimport \"vant/es/icon/style\";\nimport _Icon from \"vant/es/icon\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport QRCode from 'qrcode';\nimport { session_token, shifoushzhi_zijinmima_post, shouxufeibaifenbi_post, tixian_post, tupianshangchuan_post, zhifutongdao_post, apiWithdrawBefore, apiBindAddress, apiRealTimeExchangeRates } from \"@/API/user\";\nimport { mapGetters } from 'vuex';\nimport Footer from '@/components/Footer';\nimport { isLogin, priceFormat, priceFormat8, deduplication } from '@/utils/utis';\nexport default {\n  data() {\n    return {\n      priceFormat,\n      priceFormat8,\n      itemName: process.env.VUE_APP_ITEM_NAME,\n      data: {},\n      codes: '',\n      currentChainName: {},\n      imgUrl: '',\n      tongdao: [],\n      it: {\n        input1: '',\n        input2: ''\n      },\n      card: {\n        bankName: '',\n        bankUserName: '',\n        bankCardNo: ''\n      },\n      fileList: [],\n      shangchuanurl: '',\n      session_token: '',\n      withdraw_fee: '',\n      coinType: '',\n      value: '',\n      allowEditWithdrawAddress: false,\n      showKeyboard: true,\n      show: false,\n      bindShow: false,\n      bindData: {\n        coin: '',\n        blockchain_name: '',\n        channel_address: ''\n      },\n      blockchainNetwork: [''],\n      withdrawBefore: {},\n      linkProtocol: [],\n      linkProtocolOptions: [],\n      selectValue: '0',\n      selectCurrency: '',\n      withdrawalMethod: [],\n      currentRate: 0\n    };\n  },\n  components: {\n    Footer,\n    QRCode: QRCode,\n    [_Icon.name]: _Icon,\n    [_Tab.name]: _Tab,\n    [_Tabs.name]: _Tabs,\n    [_Uploader.name]: _Uploader,\n    [_Overlay.name]: _Overlay,\n    [_Dialog.name]: _Dialog,\n    [_PasswordInput.name]: _PasswordInput,\n    [_NumberKeyboard.name]: _NumberKeyboard\n  },\n  async created() {\n    if (!isLogin()) {\n      this.$router.push('/');\n    } else {\n      this.$store.dispatch(\"getUserMoney\");\n      await this.requestWithdrawBefore();\n      this.zhifutongdao();\n    }\n    if (sessionStorage.getItem('withdraw_price')) {\n      this.it.input1 = sessionStorage.getItem('withdraw_price');\n      this.it.input2 = sessionStorage.getItem('withdraw_address');\n      this.card.bankName = sessionStorage.getItem('withdraw_bankName');\n      this.card.bankUserName = sessionStorage.getItem('withdraw_bankUserName');\n      this.card.bankCardNo = sessionStorage.getItem('withdraw_bankCardNo');\n      this.selectValue = sessionStorage.getItem('withdraw_index');\n    }\n  },\n  computed: {\n    ...mapGetters({\n      userMoney: \"userMoney\"\n    }),\n    exchangeRateConversion() {\n      if (!this.currentRate) return 0;\n      if (['BTC', 'ETH'].includes(this.selectCurrency)) {\n        return this.priceFormat8(this.userMoney?.money / this.currentRate);\n      }\n      return this.priceFormat(this.userMoney?.money / this.currentRate);\n    }\n  },\n  methods: {\n    // 获取实时汇率\n    async requestLiveRates(symbol) {\n      const res = await apiRealTimeExchangeRates({\n        symbol\n      });\n      this.currentRate = res.price;\n    },\n    // 选择币种\n    selectCurrencyChange(val) {\n      this.it.input1 = '';\n      this.blockchainNetwork = [];\n      const tempItem = this.linkProtocol.filter(item => item.coin == val);\n      tempItem.forEach(item => {\n        this.blockchainNetwork.push(item.blockchain_name);\n      });\n      this.coinType = val;\n      this.currentChainName = this.blockchainNetwork[0];\n      this.requestLiveRates(val);\n      this.shouxufei();\n    },\n    async requestWithdrawBefore() {\n      const res = await apiWithdrawBefore();\n      // allowEditWithdrawAddress   是否允许用户编辑提现地址  0 - 不允许 1 - 允许\n      // chainName                  币种协议 ERC20\n      // existWithdrawAddress       旧的提现地址 \n      // needBindWithdrawAddress    是否提示绑定提现地址 0 - 不提示 1 - 提示\n      // openWithdrawAddressBinding 是否开启绑定提现地址 0 - 不开启 1 - 开启\n      if (res?.openWithdrawAddressBinding == 0) return;\n      this.allowEditWithdrawAddress = !!res.existWithdrawAddress;\n      this.bindShow = !res.existWithdrawAddress;\n      this.it.input2 = res.existWithdrawAddress;\n      this.blockchainNetwork = [res.chainName];\n      this.currentChainName = this.blockchainNetwork[0];\n      this.session_token = res.session_token;\n      this.coinType = res.coinType;\n    },\n    // 弹框 - 绑定按钮\n    async requestHandleBind() {\n      if (this.bindData.coin == '') {\n        this.$notify(this.$t('请选择取款方式'));\n        return;\n      }\n      if (this.bindData.blockchain_name == '') {\n        this.$notify(this.$t('请选择链接协议'));\n        return;\n      }\n      if (this.bindData.channel_address == '') {\n        this.$notify(this.$t('请输入钱包地址'));\n        return;\n      }\n      _Toast.loading({\n        message: this.$t('加载中...'),\n        forbidClick: true\n      });\n      try {\n        await apiBindAddress(this.bindData);\n        this.$notify(this.$t('绑定提现地址成功'), 'success');\n        this.bindShow = false;\n        _Toast.clear();\n        this.blockchainNetwork = [this.bindData.blockchain_name];\n        this.it.input2 = this.bindData.channel_address;\n        this.allowEditWithdrawAddress = true;\n      } catch (error) {\n        _Toast.clear();\n      }\n    },\n    // 弹框 - 取款方式变更时\n    handleCoinChange(val) {\n      const tempArr = this.linkProtocol.filter(item => item.coin == val);\n      this.linkProtocolOptions = tempArr.map(item => {\n        return {\n          value: item.blockchain_name,\n          label: item.blockchain_name,\n          ...item\n        };\n      });\n      this.bindData.blockchain_name = this.linkProtocolOptions[0].value;\n    },\n    shouxufei() {\n      shouxufeibaifenbi_post({\n        channel: this.coinType\n      }).then(res => {\n        this.withdraw_fee = res.withdraw_fee;\n      });\n    },\n    biaodan_tijiao2() {\n      if (this.it.input1.trim() === '') {\n        _Toast(this.$t('请输入金额'));\n        return;\n      }\n      if (this.userMoney?.money < this.it.input1.trim()) {\n        return _Toast(this.$t('账户余额不足'));\n      }\n      if (this.selectValue == 0) {\n        // 虚拟币\n        if (this.it.input2.trim() === '') {\n          _Toast(this.$t('请输入地址'));\n          return;\n        }\n      } else {\n        // 银行卡\n        if (this.card.bankName.trim() === '') return _Toast(this.$t('请输入开户行'));\n        if (this.card.bankUserName.trim() === '') return _Toast(this.$t('请输入姓名'));\n        if (this.card.bankCardNo.trim() === '') return _Toast(this.$t('请输入卡号'));\n      }\n      shifoushzhi_zijinmima_post({}).then(res => {\n        if (res.safeword == 1) {\n          this.show = true;\n          this.showKeyboard = true;\n          if (sessionStorage.getItem('withdraw_price')) {\n            sessionStorage.removeItem('withdraw_price');\n            sessionStorage.removeItem('withdraw_address');\n            sessionStorage.removeItem('withdraw_bankName');\n            sessionStorage.removeItem('withdraw_bankUserName');\n            sessionStorage.removeItem('withdraw_bankCardNo');\n            sessionStorage.removeItem('withdraw_index');\n          }\n        } else {\n          sessionStorage.setItem('withdraw_index', this.selectValue);\n          if (this.selectValue == 0) {\n            sessionStorage.setItem('withdraw_price', this.it.input1);\n            sessionStorage.setItem('withdraw_address', this.it.input2);\n          } else {\n            sessionStorage.setItem('withdraw_bankName', this.card.bankName);\n            sessionStorage.setItem('withdraw_bankUserName', this.card.bankUserName);\n            sessionStorage.setItem('withdraw_bankCardNo', this.card.bankCardNo);\n          }\n          this.$router.push({\n            path: '/FundPasswordSettings'\n          });\n        }\n      });\n    },\n    biaodan_tijiao() {\n      session_token({}).then(res => {\n        this.session_token = res.session_token;\n        if (this.selectValue == 0) {\n          this.chongzhitijiao();\n        } else {\n          const params = {\n            ...this.card,\n            session_token: this.session_token,\n            amount: this.it.input1,\n            channel: 'bank',\n            safeword: this.value\n          };\n          tixian_post(params).then(res => {\n            // Toast(this.$t('提交成功'));\n            Object.keys(this.card).forEach(key => {\n              this.card[key] = '';\n            });\n            this.$router.push('/SubmitCompleted?path=withdrawRecord');\n          }).finally(() => {\n            this.it.input1 = '';\n            this.fileList = [];\n            this.shangchuanurl = '';\n            this.value = '';\n            this.show = false;\n          });\n        }\n      });\n    },\n    chongzhitijiao() {\n      var data = {\n        'session_token': this.session_token,\n        'amount': this.it.input1,\n        'from': this.it.input2,\n        'channel': this.coinType,\n        'safeword': this.value\n      };\n      this.show = false;\n      this.value = '';\n      tixian_post(data).then(res => {\n        // Toast(this.$t('提交成功'));\n        this.it.input1 = '';\n        this.fileList = [];\n        this.shangchuanurl = '';\n        this.$router.push('/SubmitCompleted?path=withdrawRecord');\n      }).then();\n    },\n    tongdao_qiehuan(e) {\n      this.currentChainName = e;\n      // this.useqrcode1()\n    },\n    zhifutongdao() {\n      zhifutongdao_post({}).then(res22 => {\n        // this.code = this.$route.query.usercode\n        // this.withdrawalMethod = res22\n        const tempArr = res22.map(item => ({\n          label: item.coin,\n          value: item.coin\n        }));\n        this.withdrawalMethod = deduplication(tempArr, 'value');\n        this.coinType = this.selectCurrency = this.withdrawalMethod[0].value;\n        this.linkProtocol = res22;\n        for (var i = 0; i < res22.length; i++) {\n          this.tongdao.push(res22[i]);\n        }\n        if (this.allowEditWithdrawAddress) return;\n        // this.blockchainNetwork = this.tongdao.map(item => item.blockchain_name)\n        const tempItem = this.linkProtocol.filter(item => item.coin == this.selectCurrency);\n        tempItem.forEach(item => {\n          item.blockchain_name && this.blockchainNetwork.push(item.blockchain_name);\n        });\n        this.blockchainNetwork = this.blockchainNetwork.filter(item => item);\n        this.currentChainName = this.blockchainNetwork[0];\n        this.requestLiveRates(this.selectCurrency);\n        this.shouxufei();\n        // this.bindData.coin = this.tongdao[0]\n        // this.useqrcode1()\n      });\n    },\n    afterRead(file) {\n      let formData = new FormData(); //通过formdata上传\n      formData.append('file', file.file);\n      tupianshangchuan_post(formData).then(res => {\n        this.shangchuanurl = res;\n      }).catch(function (err) {\n        this.fileList = [];\n        _Toast(this.$t('添加失败'));\n      });\n    },\n    copyData(ea) {\n      //如果需要回调：\n      this.$copyText(ea).then(e => {\n        alert(this.$t('复制成功'));\n      }, function (e) {\n        alert(this.$t('复制失败'));\n      });\n    },\n    copyData2(ea) {\n      //如果需要回调：\n      this.$copyText(ea).then(e => {\n        // alert('复制成功')\n      }, function (e) {\n        // alert('复制失败')\n      });\n    },\n    // useqrcode1() {//生成二维码\n    //     let canvas = document.getElementById('canvas')\n    //     let url = this.currentChainName.address\n    //     QRCode.toCanvas(canvas, url, function (error) {\n    //         if (error) {\n    //         } else {\n    //         }\n    //     })\n    //     this.saveImg()//保存图片\n    // },\n    baocunhaibao() {\n      let myCanvas = document.getElementsByTagName('canvas');\n      this.imgUrl = myCanvas[0].toDataURL('image/png');\n      this.getUrlBase64(this.imgUrl).then(base64 => {\n        let link = document.createElement('a');\n        link.href = base64;\n        link.download = 'qrCode.png';\n        link.click();\n      });\n    },\n    getUrlBase64(url) {\n      return new Promise(resolve => {\n        let canvas = document.createElement('canvas');\n        let ctx = canvas.getContext('2d');\n        let img = new Image();\n        img.crossOrigin = 'Anonymous'; //允许跨域\n        img.src = url;\n        img.onload = function () {\n          canvas.height = 300;\n          canvas.width = 300;\n          ctx.drawImage(img, 0, 0, 300, 300);\n          let dataURL = canvas.toDataURL('image/png');\n          canvas = null;\n          resolve(dataURL);\n        };\n      });\n    },\n    //保存图片\n    saveImg() {\n      let myCanvas = document.getElementsByTagName('canvas');\n      this.imgUrl = myCanvas[0].toDataURL('image/png');\n    },\n    onClickLeft() {\n      if (sessionStorage.getItem('withdraw_price')) {\n        sessionStorage.removeItem('withdraw_price');\n        sessionStorage.removeItem('withdraw_address');\n        sessionStorage.removeItem('withdraw_bankName');\n        sessionStorage.removeItem('withdraw_bankUserName');\n        sessionStorage.removeItem('withdraw_bankCardNo');\n        sessionStorage.removeItem('withdraw_index');\n      }\n      this.$router.push({\n        path: '/me',\n        dir: 'left'\n      });\n      // this.$router.go(-1)\n    },\n    onClick1() {\n      this.$router.push({\n        path: '/withdrawRecord'\n      });\n    },\n    onCoinChange(val) {\n      if (val == 1) {\n        this.coinType = 'bank';\n        this.shouxufei();\n      } else {\n        this.coinType = this.selectCurrency;\n        this.shouxufei();\n      }\n      if (['SM-wholesaleShop', 'FamilyShop'].includes(this.itemName)) {\n        this.$router.push({\n          path: '/customerServiceIndex?path=customerService'\n        });\n        return;\n      }\n      this.it.input1 = '';\n    },\n    handleInput(val) {\n      if (val > this.userMoney?.money) {\n        this.it.input1 = this.userMoney?.money;\n        return;\n      } else {\n        this.it.input1 = this.it.input1.replace(/[^\\d.]/g, \"\"); // 非数字和小数点替换为空字符串\n        this.it.input1 = this.it.input1.replace(/\\.{2,}/g, \".\"); // 连续出现多个小数点替换为单个小数点\n        this.it.input1 = this.it.input1.replace(/^\\./g, \"\"); // 第一个字符如果是小数点则替换为空字符串\n        this.it.input1 = this.it.input1.replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\"); // 将第一个小数点替换为$#$，去除所有小数点，再将$#$替换回小数点\n        if (['BTC', 'ETH'].includes(this.selectCurrency)) {\n          this.it.input1 = this.it.input1.replace(/^(\\-)*(\\d+)\\.(\\d{0,10}).*$/, \"$1$2.$3\"); // 最多允许输入10位小数\n          this.it.input1 = this.it.input1.replace(/^\\D*(\\d{0,10}(?:\\.\\d{0,10})?).*$/g, \"$1\"); // 最多允许输入10位数字\n        } else {\n          this.it.input1 = this.it.input1.replace(/^(\\-)*(\\d+)\\.(\\d{0,2}).*$/, \"$1$2.$3\"); // 最多允许输入2位小数\n          // this.it.input1 = this.it.input1.replace(/^\\D*(\\d{0,2}(?:\\.\\d{0,10})?).*$/g, \"$1\"); // 最多允许输入10位数字\n        }\n\n        // this.it.input1 = val\n      }\n    }\n  },\n  watch: {\n    value(value) {\n      if (value.length === 6) {\n        this.showKeyboard = false;\n        this.biaodan_tijiao();\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}