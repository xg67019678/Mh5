{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport store from '@/store';\nimport moment from \"moment-timezone\";\nimport dayjs from 'dayjs';\nimport i18n from \"@/i18n\";\nexport const getUrlVal = name => {\n  let url = location.href;\n  let urlStr = url?.split('?')[1];\n  // 创建空对象存储参数\n  let obj = {};\n  // 再通过 & 将每一个参数单独分割出来\n  let paramsArr = urlStr?.split('&');\n  if (paramsArr) {\n    for (let i = 0, len = paramsArr?.length; i < len; i++) {\n      // 再通过 = 将每一个参数分割为 key:value 的形式\n      let arr = paramsArr[i]?.split('=');\n      obj[arr[0]] = arr[1];\n    }\n  }\n  return obj[name];\n};\n/**\n * \n *  判断是否是手机端\n */\nexport const is_mobile = () => {\n  var regex_match = /(nokia|iphone|android|motorola|^mot-|softbank|foma|docomo|kddi|up.browser|up.link|htc|dopod|blazer|netfront|helio|hosin|huawei|novarra|CoolPad|webos|techfaith|palmsource|blackberry|alcatel|amoi|ktouch|nexian|samsung|^sam-|s[cg]h|^lge|ericsson|philips|sagem|wellcom|bunjalloo|maui|symbian|smartphone|midp|wap|phone|windows ce|iemobile|^spice|^bird|^zte-|longcos|pantech|gionee|^sie-|portalmmm|jigs browser|hiptop|^benq|haier|^lct|operas*mobi|opera*mini|320x320|240x320|176x220)/i;\n  var u = navigator.userAgent;\n  if (null == u) {\n    return true;\n  }\n  var result = regex_match.exec(u);\n  if (null == result) {\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\n * @description 时间格式处理\n */\nexport const formatData = data => {\n  let thisData = formatTime(new Date(), \"yyyy-MM-dd hh:mm:ss\");\n  let myData = data.substr(0, 10);\n  if (thisData == myData) {\n    let Time = data.substr(11, 5);\n    return Time;\n  } else {\n    if (thisData.substr(0, 4) == myData.substr(0, 4) && thisData != myData) {\n      let Data = data.substr(5, 11);\n      return Data;\n    } else {\n      let Year = myData;\n      return Year;\n    }\n  }\n};\n\n/**\n * @description 时间格式转化\n * @param {String} date 日期\n * @param {String} fmt 需要的格式\n */\nexport const formatTime = (date, fmt) => {\n  let o = {\n    \"M+\": date.getMonth() + 1,\n    //月份\n    \"d+\": date.getDate(),\n    //日\n    \"h+\": date.getHours(),\n    //小时\n    \"m+\": date.getMinutes(),\n    //分\n    \"s+\": date.getSeconds(),\n    //秒\n    \"q+\": Math.floor((date.getMonth() + 3) / 3),\n    //季度\n    \"S\": date.getMilliseconds() //毫秒\n  };\n  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n  for (let k in o) if (new RegExp(\"(\" + k + \")\").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n  return fmt;\n};\n\n/**\n * @description 验证手机号格式是否正确\n * @param {String} mobile 电话号码\n */\nexport const checkMobileformat = mobile => /^1[345789]\\d{9}$/.test(mobile);\n\n/**\n * @description Array clear empty item.\n * @param {Array} array\n */\nexport const arrayClearEmptyItem = array => {\n  return array.filter(item => item);\n};\n\n/**\n * @description 判断一个日期是过去还是未来\n * @param {String} d 要判断的日期\n * @returns past => false   future => true\n */\nexport const judgeDateIsPastOrFuture = d => {\n  if (!d) {\n    return false;\n  }\n  const nowDate = new Date();\n  const nowTimeStamp = nowDate.getTime();\n  const date = new Date(d.replace(/-/g, \"/\"));\n  const dateTimeStamp = date.getTime();\n  return nowTimeStamp < dateTimeStamp;\n};\n\n/**\n * @description 判断一个字符串中是否有重复的项（0-9, a-z, A-Z）\n * @param {String} str 判断的目标字符串\n * @returns {Boolean} true: 有重复项   false: 无重复项\n */\nexport const strIsReplace = str => {\n  const passwordRule = /[0-9a-zA-Z]/;\n  const arr = str.split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n    if (passwordRule.test(element)) {\n      if (i === arr.length - 1) {\n        return false;\n      }\n      if (str.includes(element, i + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n// 设置localStorage\nexport const setStorage = function (key, obj) {\n  let json = JSON.stringify(obj);\n  window.localStorage.setItem(key, json);\n};\n\n// 获取localStorage\nexport const getStorage = function (key) {\n  const str = window.localStorage.getItem(key);\n  if (!str) {\n    return null;\n  }\n  return str;\n};\n\n// 移除localStorage\nexport const removeStorage = function (key) {\n  window.localStorage.removeItem(key);\n};\n\n// 获取浏览器默认语言\nexport const getBrowserLang = function () {\n  let browserLang = navigator.language ? navigator.language : navigator.browserLanguage;\n  let defaultBrowserLang = '';\n  if (browserLang?.toLowerCase() === 'cn' || browserLang?.toLowerCase() === 'zh' || browserLang?.toLowerCase() === 'cn') {\n    defaultBrowserLang = 'cn';\n  } else {\n    defaultBrowserLang = 'en';\n  }\n  return defaultBrowserLang;\n};\n\n// 是否登录\nexport const isLogin = () => {\n  return store.getters.userInfo && localStorage.getItem('token');\n};\n\n// 图片地址\nexport const getImgUrl = path => {\n  return `https://www.tkshouppig.com/wap/public/showimg!showImg.action?imagePath=${path}`;\n};\n\n/**\n * 数字千位符格式化\n * eg:\n * 17267737 -> 17,267,737\n */\nexport const priceFormat = (num, int) => {\n  if (num && Number(num)) {\n    const numStr = _toFixed(num, 2);\n    const numPre = numStr.slice(0, numStr.indexOf('.'));\n    const numRi = numStr.slice(numStr.indexOf('.') + 1);\n    const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00';\n    return int ? `${intStr}` : `${intStr}${floatStr}`;\n  } else {\n    return 0;\n  }\n};\nexport const priceFormat8 = (num, int) => {\n  if (num && Number(num)) {\n    const numStr = _toFixed(num, 10);\n    const numPre = numStr.slice(0, numStr.indexOf('.'));\n    const numRi = numStr.slice(numStr.indexOf('.') + 1);\n    const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00';\n    return int ? `${intStr}` : `${intStr}${floatStr}`;\n  } else {\n    return 0;\n  }\n};\nexport const priceFormatInt = num => {\n  if (num && Number(num)) {\n    const numStr = _toFixed(num, 2);\n    const numPre = numStr.slice(0, numStr.indexOf('.'));\n    const numRi = numStr.slice(numStr.indexOf('.') + 1);\n    const intStr = numPre.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n    const floatStr = numRi ? `.${numRi.length < 2 ? numRi + '0' : numRi}` : '.00';\n    return intStr;\n  } else {\n    return 0;\n  }\n};\nexport const formatZoneDate = time => {\n  if (!time) return '--';\n  //设置服务器默认时区\n  moment.tz.setDefault('Asia/Shanghai');\n  time = moment(time);\n  //获取当前时区\n  let timezone = moment.tz.guess(true);\n  //time转成当前时区的时间\n  time = moment.tz(time, timezone).format('YYYY-MM-DD HH:mm:ss');\n  return time;\n};\n// 不要四舍五入 直接截取\nconst _toFixed = (num, decimal) => {\n  num = num.toString();\n  let index = num.indexOf('.');\n  if (index !== -1) {\n    num = num.substring(0, decimal + index + 1);\n  } else {\n    num = num.substring(0);\n  }\n  return parseFloat(num).toFixed(decimal);\n};\n\n/**\n * 身份证/护照号码验证\n * 验证字母或者数字\n */\n\nexport const isAlphanumeric = str => {\n  return /^[a-zA-Z0-9]+$/.test(str);\n};\n\n// 数组对象去重\nexport const deduplication = (arr, key) => {\n  const res = new Map();\n  return arr.filter(arr => !res.has(arr[key]) && res.set(arr[key], 1));\n};\n\n/**\n* 仿照微信中的消息时间显示逻辑，将时间戳（单位：毫秒）转换为友好的显示格式.\n*\n* 1）7天之内的日期显示逻辑是：今天、昨天(-1d)、前天(-2d)、星期？（只显示总计7天之内的星期数，即<=-4d）；\n* 2）7天之外（即>7天）的逻辑：直接显示完整日期时间。\n*\n* @param  {[long]} timestamp 时间戳（单位：毫秒），形如：1550789954260\n* @param {boolean} mustIncludeTime true表示输出的格式里一定会包含“时间:分钟”\n* ，否则不包含（参考微信，不包含时分的情况，用于首页“消息”中显示时）\n*\n* @return {string} 输出格式形如：“刚刚”、“10:30”、“昨天 12:04”、“前天 20:51”、“星期二”、“2019/2/21 12:09”等形式\n* @since 1.1\n*/\nexport const shourtTimeString = date => {\n  const dateTime = dayjs(date);\n  const diffMinute = (dayjs().unix() - dateTime.unix()) / 60;\n  const diffDays = Math.floor(diffMinute / (60 * 24));\n  // const utcDay = dateTime.utc().tz();\n  if (diffDays === 0) {\n    if (diffMinute < 5) {\n      return i18n.i18n.t('just');\n    }\n    return dateTime.format('HH:mm');\n  } else if (diffDays === 1) {\n    return i18n.i18n.t('yesterday');\n  } else if (diffDays === 2) {\n    return i18n.i18n.t('beforeYesterday');\n  } else if (diffDays >= 3 && diffDays <= 6) {\n    const weeks = [i18n.i18n.t('sunday'), i18n.i18n.t('monday'), i18n.i18n.t('tuesday'), i18n.i18n.t('wednesday'), i18n.i18n.t('thursday'), i18n.i18n.t('friday'), i18n.i18n.t('saturday')];\n    return weeks[dateTime.day()];\n  }\n  return dateTime.format('MM-DD');\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}