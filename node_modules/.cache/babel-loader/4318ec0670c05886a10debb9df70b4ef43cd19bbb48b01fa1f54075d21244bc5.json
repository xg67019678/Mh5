{"ast":null,"code":"// Utils\nimport { createNamespace } from '../utils';\nimport { range } from '../utils/format/number';\nimport { preventDefault } from '../utils/dom/event'; // Mixins\n\nimport { TouchMixin } from '../mixins/touch';\nimport { ClickOutsideMixin } from '../mixins/click-outside';\nvar _createNamespace = createNamespace('swipe-cell'),\n  createComponent = _createNamespace[0],\n  bem = _createNamespace[1];\nvar THRESHOLD = 0.15;\nexport default createComponent({\n  mixins: [TouchMixin, ClickOutsideMixin({\n    event: 'touchstart',\n    method: 'onClick'\n  })],\n  props: {\n    // @deprecated\n    // should be removed in next major version, use beforeClose instead\n    onClose: Function,\n    disabled: Boolean,\n    leftWidth: [Number, String],\n    rightWidth: [Number, String],\n    beforeClose: Function,\n    stopPropagation: Boolean,\n    name: {\n      type: [Number, String],\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      offset: 0,\n      dragging: false\n    };\n  },\n  computed: {\n    computedLeftWidth: function computedLeftWidth() {\n      return +this.leftWidth || this.getWidthByRef('left');\n    },\n    computedRightWidth: function computedRightWidth() {\n      return +this.rightWidth || this.getWidthByRef('right');\n    }\n  },\n  mounted: function mounted() {\n    this.bindTouchEvent(this.$el);\n  },\n  methods: {\n    getWidthByRef: function getWidthByRef(ref) {\n      if (this.$refs[ref]) {\n        var rect = this.$refs[ref].getBoundingClientRect();\n        return rect.width;\n      }\n      return 0;\n    },\n    // @exposed-api\n    open: function open(position) {\n      var offset = position === 'left' ? this.computedLeftWidth : -this.computedRightWidth;\n      this.opened = true;\n      this.offset = offset;\n      this.$emit('open', {\n        position: position,\n        name: this.name,\n        // @deprecated\n        // should be removed in next major version\n        detail: this.name\n      });\n    },\n    // @exposed-api\n    close: function close(position) {\n      this.offset = 0;\n      if (this.opened) {\n        this.opened = false;\n        this.$emit('close', {\n          position: position,\n          name: this.name\n        });\n      }\n    },\n    onTouchStart: function onTouchStart(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.startOffset = this.offset;\n      this.touchStart(event);\n    },\n    onTouchMove: function onTouchMove(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.touchMove(event);\n      if (this.direction === 'horizontal') {\n        this.dragging = true;\n        this.lockClick = true;\n        var isPrevent = !this.opened || this.deltaX * this.startOffset < 0;\n        if (isPrevent) {\n          preventDefault(event, this.stopPropagation);\n        }\n        this.offset = range(this.deltaX + this.startOffset, -this.computedRightWidth, this.computedLeftWidth);\n      }\n    },\n    onTouchEnd: function onTouchEnd() {\n      var _this = this;\n      if (this.disabled) {\n        return;\n      }\n      if (this.dragging) {\n        this.toggle(this.offset > 0 ? 'left' : 'right');\n        this.dragging = false; // compatible with desktop scenario\n\n        setTimeout(function () {\n          _this.lockClick = false;\n        }, 0);\n      }\n    },\n    toggle: function toggle(direction) {\n      var offset = Math.abs(this.offset);\n      var threshold = this.opened ? 1 - THRESHOLD : THRESHOLD;\n      var computedLeftWidth = this.computedLeftWidth,\n        computedRightWidth = this.computedRightWidth;\n      if (computedRightWidth && direction === 'right' && offset > computedRightWidth * threshold) {\n        this.open('right');\n      } else if (computedLeftWidth && direction === 'left' && offset > computedLeftWidth * threshold) {\n        this.open('left');\n      } else {\n        this.close();\n      }\n    },\n    onClick: function onClick(position) {\n      if (position === void 0) {\n        position = 'outside';\n      }\n      this.$emit('click', position);\n      if (this.opened && !this.lockClick) {\n        if (this.beforeClose) {\n          this.beforeClose({\n            position: position,\n            name: this.name,\n            instance: this\n          });\n        } else if (this.onClose) {\n          this.onClose(position, this, {\n            name: this.name\n          });\n        } else {\n          this.close(position);\n        }\n      }\n    },\n    getClickHandler: function getClickHandler(position, stop) {\n      var _this2 = this;\n      return function (event) {\n        if (stop) {\n          event.stopPropagation();\n        }\n        _this2.onClick(position);\n      };\n    },\n    genLeftPart: function genLeftPart() {\n      var h = this.$createElement;\n      var content = this.slots('left');\n      if (content) {\n        return h(\"div\", {\n          \"ref\": \"left\",\n          \"class\": bem('left'),\n          \"on\": {\n            \"click\": this.getClickHandler('left', true)\n          }\n        }, [content]);\n      }\n    },\n    genRightPart: function genRightPart() {\n      var h = this.$createElement;\n      var content = this.slots('right');\n      if (content) {\n        return h(\"div\", {\n          \"ref\": \"right\",\n          \"class\": bem('right'),\n          \"on\": {\n            \"click\": this.getClickHandler('right', true)\n          }\n        }, [content]);\n      }\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var wrapperStyle = {\n      transform: \"translate3d(\" + this.offset + \"px, 0, 0)\",\n      transitionDuration: this.dragging ? '0s' : '.6s'\n    };\n    return h(\"div\", {\n      \"class\": bem(),\n      \"on\": {\n        \"click\": this.getClickHandler('cell')\n      }\n    }, [h(\"div\", {\n      \"class\": bem('wrapper'),\n      \"style\": wrapperStyle\n    }, [this.genLeftPart(), this.slots(), this.genRightPart()])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}