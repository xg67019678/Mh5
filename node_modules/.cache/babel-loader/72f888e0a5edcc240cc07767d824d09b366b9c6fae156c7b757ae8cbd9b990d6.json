{"ast":null,"code":"import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport \"vant/es/empty/style\";\nimport _Empty from \"vant/es/empty\";\nimport \"vant/es/icon/style\";\nimport _Icon from \"vant/es/icon\";\nimport \"vant/es/list/style\";\nimport _List from \"vant/es/list\";\nimport \"vant/es/search/style\";\nimport _Search from \"vant/es/search\";\nimport \"vant/es/pull-refresh/style\";\nimport _PullRefresh from \"vant/es/pull-refresh\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport GoodsContentOne from \"@/components/GoodsContentOne/index.vue\";\nimport ShopContentTwo from \"@/components/ShopContentTwo/index.vue\";\nimport { mapGetters } from \"vuex\";\nimport debounce from \"lodash.debounce\";\nimport { searchKeyword, searchKeywordGoods, searchSeller, apiSearchSellerGoods } from \"@/API/common\";\nexport default {\n  name: \"Search\",\n  components: {\n    [_PullRefresh.name]: _PullRefresh,\n    [_Search.name]: _Search,\n    [_List.name]: _List,\n    [_Icon.name]: _Icon,\n    [_Empty.name]: _Empty,\n    [_Toast.name]: _Toast,\n    GoodsContentOne,\n    ShopContentTwo\n  },\n  data() {\n    return {\n      searchIcon: require(\"@/assets/image/index/sousuo.png\"),\n      clearIcon: require(\"@/assets/image/index/shanchu.png\"),\n      keyword: \"\",\n      tipsShow: false,\n      tipsData: [],\n      shopData: [],\n      shopShow: false,\n      listData: [],\n      listShow: false,\n      listLoading: false,\n      loading: false,\n      finished: false,\n      refreshing: false,\n      pageNum: 1,\n      pageSize: 20,\n      currentGoodsId: null,\n      searchHistory2: [],\n      isEmpty: false,\n      searckLock: false\n    };\n  },\n  computed: {\n    ...mapGetters({\n      searchHistory: \"searchHistory\",\n      activeLang: \"language\"\n    })\n  },\n  beforeRouteLeave(to, from, next) {\n    from.meta.keepAlive = Boolean(to.name === \"CommodityDetails\");\n    next();\n  },\n  mounted() {\n    this.searchHistory2 = JSON.parse(localStorage.getItem(this.$route.query.sellerId)) || [];\n    this.searchHistory2 = [...new Set(this.searchHistory2)].reverse();\n    this.tipsData = [];\n  },\n  methods: {\n    onRefresh() {\n      this.finished = false;\n      this.pageNum = 1;\n      this.loading = true;\n      this.onLoad();\n    },\n    onLoad() {\n      if (this.refreshing) {\n        this.list = [];\n        this.refreshing = false;\n      }\n      this.getListData();\n    },\n    getListData() {\n      if (this.currentGoodsId) {\n        searchKeywordGoods({\n          goodsId: this.currentGoodsId,\n          pageNum: this.pageNum,\n          pageSize: this.pageSize\n        }).then(res => {\n          const {\n            pageList\n          } = res;\n          this.listData = this.pageNum === 1 ? pageList : [...this.listData, ...pageList];\n          this.pageNum++;\n          this.loading = false;\n          if (pageList.length < this.pageSize) {\n            this.finished = true;\n          }\n          this.listLoading = false;\n          _Toast.clear();\n        }).catch(() => {\n          this.loading = false;\n          this.listLoading = false;\n          _Toast.clear();\n        });\n      } else {\n        this.listLoading = false;\n        this.finished = true;\n        _Toast.clear();\n        this.listData = [];\n      }\n    },\n    tipsHandle(data, isShop) {\n      if (typeof data == \"string\") {\n        this.keyword = data;\n        this.searchHandle();\n        return;\n      }\n      if (isShop) {\n        this.shopShow = true;\n        this.tipsShow = false;\n        this.listShow = false;\n        searchSeller({\n          keyword: this.keyword,\n          isHot: \"0\",\n          isPrice: \"0\",\n          isNew: \"0\"\n        }).then(res => {\n          console.log(\"res ->\", res);\n          this.shopData = res.sellerList;\n        });\n      } else {\n        this.listShow = true;\n        this.tipsShow = false;\n        this.shopShow = false;\n        this.keyword = data.name;\n        this.currentGoodsId = data.goodsId;\n        this.$store.dispatch(\"setSearchHistory\", {\n          name: data.name,\n          goodsId: data.goodsId\n        });\n        _Toast.loading({\n          duration: 0,\n          message: this.$t(\"加载中\")\n        });\n        this.pageNum = 1;\n        this.finished = false;\n        this.loading = true;\n        this.listLoading = true;\n        this.refreshing = true;\n        this.listData = [];\n        this.onLoad();\n      }\n    },\n    clearHandle() {\n      this.keyword = \"\";\n      this.tipsShow = false;\n      this.listShow = false;\n      this.shopShow = false;\n    },\n    inputHandle: debounce(function () {\n      this.searchHandle();\n    }, 200),\n    searchHandle() {\n      if (this.searckLock) return;\n      this.searckLock = true;\n      setTimeout(() => {\n        this.searckLock = false;\n      }, 3000);\n      const keyword = String(this.keyword).trim();\n      if (keyword == \"\") return _Toast(this.$t(\"请输入搜索内容\"));\n      this.tipsShow = true;\n      this.listShow = false;\n      this.shopShow = false;\n      if (keyword) {\n        this.searchHistory2.push(keyword);\n        this.searchHistory2 = [...new Set(this.searchHistory2)].reverse();\n        localStorage.setItem(this.$route.query.sellerId, JSON.stringify(this.searchHistory2));\n        apiSearchSellerGoods({\n          keyword,\n          sellerId: this.$route.query.sellerId\n        }).then(res => {\n          // const { goodsList, sellerList } = res\n          const {\n            pageList,\n            pageInfo\n          } = res;\n          if (!pageList.length) {\n            _Toast(`${this.$t(\"未找到与\")}${keyword}${this.$t(\"相关的商品\")}`);\n            this.isEmpty = true;\n            return;\n          }\n          this.isEmpty = false;\n          this.listData = pageList;\n          this.tipsData = [...pageList];\n        }).catch(err => {\n          // Toast(err.message)\n        });\n      } else {\n        this.tipsShow = false;\n        this.listShow = false;\n        this.shopShow = false;\n      }\n    },\n    emptyHandle() {\n      this.$store.dispatch(\"clearSearchHistory\");\n      localStorage.removeItem(this.$route.query.sellerId);\n      this.searchHistory2 = [];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}