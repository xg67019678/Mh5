{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport Overlay from '../../overlay';\nimport { context } from './context';\nimport { mount } from '../../utils/functional';\nimport { removeNode } from '../../utils/dom/node';\nvar defaultConfig = {\n  className: '',\n  customStyle: {}\n};\nfunction mountOverlay(vm) {\n  return mount(Overlay, {\n    on: {\n      // close popup when overlay clicked & closeOnClickOverlay is true\n      click: function click() {\n        vm.$emit('click-overlay');\n        if (vm.closeOnClickOverlay) {\n          if (vm.onClickOverlay) {\n            vm.onClickOverlay();\n          } else {\n            vm.close();\n          }\n        }\n      }\n    }\n  });\n}\nexport function updateOverlay(vm) {\n  var item = context.find(vm);\n  if (item) {\n    var el = vm.$el;\n    var config = item.config,\n      overlay = item.overlay;\n    if (el && el.parentNode) {\n      el.parentNode.insertBefore(overlay.$el, el);\n    }\n    _extends(overlay, defaultConfig, config, {\n      show: true\n    });\n  }\n}\nexport function openOverlay(vm, config) {\n  var item = context.find(vm);\n  if (item) {\n    item.config = config;\n  } else {\n    var overlay = mountOverlay(vm);\n    context.stack.push({\n      vm: vm,\n      config: config,\n      overlay: overlay\n    });\n  }\n  updateOverlay(vm);\n}\nexport function closeOverlay(vm) {\n  var item = context.find(vm);\n  if (item) {\n    item.overlay.show = false;\n  }\n}\nexport function removeOverlay(vm) {\n  var item = context.find(vm);\n  if (item) {\n    removeNode(item.overlay.$el);\n    context.remove(vm);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}