{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.iterator.constructor.js\");\nrequire(\"core-js/modules/es.iterator.filter.js\");\nrequire(\"core-js/modules/es.iterator.for-each.js\");\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.VueStorage = factory());\n})(this, function () {\n  'use strict';\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n    return keys;\n  }\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n    return target;\n  }\n\n  /* eslint class-methods-use-this: off */\n  var ls = {};\n  var MemoryStorageInterface = /*#__PURE__*/\n  function () {\n    function MemoryStorageInterface() {\n      _classCallCheck(this, MemoryStorageInterface);\n      Object.defineProperty(this, 'length', {\n        /**\n         * Define length property\n         *\n         * @return {number}\n         */\n        get: function get() {\n          return Object.keys(ls).length;\n        }\n      });\n    }\n    /**\n     * Get item\n     *\n     * @param {string} name\n     * @returns {*}\n     */\n\n    _createClass(MemoryStorageInterface, [{\n      key: \"getItem\",\n      value: function getItem(name) {\n        return name in ls ? ls[name] : null;\n      }\n      /**\n       * Set item\n       *\n       * @param {string} name\n       * @param {*} value\n       * @returns {boolean}\n       */\n    }, {\n      key: \"setItem\",\n      value: function setItem(name, value) {\n        ls[name] = value;\n        return true;\n      }\n      /**\n       * Remove item\n       *\n       * @param {string} name\n       * @returns {boolean}\n       */\n    }, {\n      key: \"removeItem\",\n      value: function removeItem(name) {\n        var found = name in ls;\n        if (found) {\n          return delete ls[name];\n        }\n        return false;\n      }\n      /**\n       * Clear storage\n       *\n       * @returns {boolean}\n       */\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        ls = {};\n        return true;\n      }\n      /**\n       * Get item by key\n       *\n       * @param {number} index\n       * @returns {*}\n       */\n    }, {\n      key: \"key\",\n      value: function key(index) {\n        var keys = Object.keys(ls);\n        return typeof keys[index] !== 'undefined' ? keys[index] : null;\n      }\n    }]);\n    return MemoryStorageInterface;\n  }();\n  var MemoryStorage = new MemoryStorageInterface();\n  var listeners = {};\n  /**\n   * Event class\n   */\n\n  var WebStorageEvent = /*#__PURE__*/\n  function () {\n    function WebStorageEvent() {\n      _classCallCheck(this, WebStorageEvent);\n    }\n    _createClass(WebStorageEvent, null, [{\n      key: \"on\",\n      /**\n       * Add storage change event\n       *\n       * @param {string} name\n       * @param {Function} callback\n       */\n      value: function on(name, callback) {\n        if (typeof listeners[name] === 'undefined') {\n          listeners[name] = [];\n        }\n        listeners[name].push(callback);\n      }\n      /**\n       * Remove storage change event\n       *\n       * @param {string} name\n       * @param {Function} callback\n       */\n    }, {\n      key: \"off\",\n      value: function off(name, callback) {\n        if (listeners[name].length) {\n          listeners[name].splice(listeners[name].indexOf(callback), 1);\n        } else {\n          listeners[name] = [];\n        }\n      }\n      /**\n       * Emit event\n       *\n       * @param {Object} event\n       */\n    }, {\n      key: \"emit\",\n      value: function emit(event) {\n        var e = event || window.event;\n        var getValue = function getValue(data) {\n          try {\n            return JSON.parse(data).value;\n          } catch (err) {\n            return data;\n          }\n        };\n        var fire = function fire(listener) {\n          var newValue = getValue(e.newValue);\n          var oldValue = getValue(e.oldValue);\n          listener(newValue, oldValue, e.url || e.uri);\n        };\n        if (typeof e === 'undefined' || typeof e.key === 'undefined') {\n          return;\n        }\n        var all = listeners[e.key];\n        if (typeof all !== 'undefined') {\n          all.forEach(fire);\n        }\n      }\n    }]);\n    return WebStorageEvent;\n  }();\n\n  /**\n   * Storage Bridge\n   */\n\n  var WebStorage = /*#__PURE__*/\n  function () {\n    /**\n     * @param {Object} storage\n     */\n    function WebStorage(storage) {\n      _classCallCheck(this, WebStorage);\n      this.storage = storage;\n      this.options = {\n        namespace: '',\n        events: ['storage']\n      };\n      Object.defineProperty(this, 'length', {\n        /**\n         * Define length property\n         *\n         * @return {number}\n         */\n        get: function get() {\n          return this.storage.length;\n        }\n      });\n      if (typeof window !== 'undefined') {\n        for (var i in this.options.events) {\n          if (window.addEventListener) {\n            window.addEventListener(this.options.events[i], WebStorageEvent.emit, false);\n          } else if (window.attachEvent) {\n            window.attachEvent(\"on\".concat(this.options.events[i]), WebStorageEvent.emit);\n          } else {\n            window[\"on\".concat(this.options.events[i])] = WebStorageEvent.emit;\n          }\n        }\n      }\n    }\n    /**\n     * Set Options\n     *\n     * @param {Object} options\n     */\n\n    _createClass(WebStorage, [{\n      key: \"setOptions\",\n      value: function setOptions() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.options = Object.assign(this.options, options);\n      }\n      /**\n       * Set item\n       *\n       * @param {string} name\n       * @param {*} value\n       * @param {number} expire - seconds\n       */\n    }, {\n      key: \"set\",\n      value: function set(name, value) {\n        var expire = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var stringifyValue = JSON.stringify({\n          value: value,\n          expire: expire !== null ? new Date().getTime() + expire : null\n        });\n        this.storage.setItem(this.options.namespace + name, stringifyValue);\n      }\n      /**\n       * Get item\n       *\n       * @param {string} name\n       * @param {*} def - default value\n       * @returns {*}\n       */\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        var def = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var item = this.storage.getItem(this.options.namespace + name);\n        if (item !== null) {\n          try {\n            var data = JSON.parse(item);\n            if (data.expire === null) {\n              return data.value;\n            }\n            if (data.expire >= new Date().getTime()) {\n              return data.value;\n            }\n            this.remove(name);\n          } catch (err) {\n            return def;\n          }\n        }\n        return def;\n      }\n      /**\n       * Get item by key\n       *\n       * @param {number} index\n       * @return {*}\n       */\n    }, {\n      key: \"key\",\n      value: function key(index) {\n        return this.storage.key(index);\n      }\n      /**\n       * Remove item\n       *\n       * @param {string} name\n       * @return {boolean}\n       */\n    }, {\n      key: \"remove\",\n      value: function remove(name) {\n        return this.storage.removeItem(this.options.namespace + name);\n      }\n      /**\n       * Clear storage\n       */\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        if (this.length === 0) {\n          return;\n        }\n        var removedKeys = [];\n        for (var i = 0; i < this.length; i++) {\n          var key = this.storage.key(i);\n          var regexp = new RegExp(\"^\".concat(this.options.namespace, \".+\"), 'i');\n          if (regexp.test(key) === false) {\n            continue;\n          }\n          removedKeys.push(key);\n        }\n        for (var _key in removedKeys) {\n          this.storage.removeItem(removedKeys[_key]);\n        }\n      }\n      /**\n       * Add storage change event\n       *\n       * @param {string} name\n       * @param {Function} callback\n       */\n    }, {\n      key: \"on\",\n      value: function on(name, callback) {\n        WebStorageEvent.on(this.options.namespace + name, callback);\n      }\n      /**\n       * Remove storage change event\n       *\n       * @param {string} name\n       * @param {Function} callback\n       */\n    }, {\n      key: \"off\",\n      value: function off(name, callback) {\n        WebStorageEvent.off(this.options.namespace + name, callback);\n      }\n    }]);\n    return WebStorage;\n  }();\n  var _global = typeof window !== 'undefined' ? window : global || {};\n  /**\n   * @type {{install: (function(Object, Object): WebStorage)}}\n   */\n\n  var VueStorage = {\n    /**\n     * use storage\n     *\n     * @param {Object} options\n     * @returns {WebStorage}\n     */\n    useStorage: function useStorage(options) {\n      var _options = _objectSpread2(_objectSpread2({}, options), {}, {\n        storage: options.storage || 'local',\n        name: options.name || 'ls'\n      });\n      if (_options.storage && ['memory', 'local', 'session'].indexOf(_options.storage) === -1) {\n        throw new Error(\"Vue-ls: Storage \\\"\".concat(_options.storage, \"\\\" is not supported\"));\n      }\n      var store = null;\n      switch (_options.storage) {\n        // eslint-disable-line\n        case 'local':\n          try {\n            store = 'localStorage' in _global ? _global.localStorage : null;\n          } catch (e) {// In some situations the browser will throw a security exception when attempting to access\n          }\n          break;\n        case 'session':\n          try {\n            store = 'sessionStorage' in _global ? _global.sessionStorage : null;\n          } catch (e) {// In some situations the browser will throw a security exception when attempting to access\n          }\n          break;\n        case 'memory':\n          store = MemoryStorage;\n          break;\n      }\n      if (!store) {\n        store = MemoryStorage; // eslint-disable-next-line\n\n        console.error(\"Vue-ls: Storage \\\"\".concat(_options.storage, \"\\\" is not supported your system, use memory storage\"));\n      }\n      var ls = new WebStorage(store);\n      ls.setOptions(Object.assign(ls.options, {\n        namespace: ''\n      }, _options || {}));\n      return {\n        ls: ls,\n        _options: _options\n      };\n    },\n    /**\n     * Install plugin\n     *\n     * @param {Object} Vue\n     * @param {Object} options\n     * @returns {WebStorage}\n     */\n    install: function install(Vue) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _this$useStorage = this.useStorage(options),\n        ls = _this$useStorage.ls,\n        _options = _this$useStorage._options;\n      Vue[_options.name] = ls; // eslint-disable-line\n\n      Object.defineProperty(Vue.prototype || Vue.config.globalProperties, \"$\".concat(_options.name), {\n        /**\n         * Define $ls property\n         *\n         * @return {WebStorage}\n         */\n        get: function get() {\n          return ls;\n        }\n      });\n    }\n  }; // eslint-disable-next-line\n\n  _global.VueStorage = VueStorage;\n  return VueStorage;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}