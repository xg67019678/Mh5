{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createPopper as _createPopper, offsetModifier } from '@vant/popperjs';\nimport { createNamespace, isServer } from '../utils';\nimport { BORDER_BOTTOM } from '../utils/constant'; // Mixins\n\nimport { ClickOutsideMixin } from '../mixins/click-outside'; // Components\n\nimport Icon from '../icon';\nimport Popup from '../popup';\nvar _createNamespace = createNamespace('popover'),\n  createComponent = _createNamespace[0],\n  bem = _createNamespace[1];\nexport default createComponent({\n  mixins: [ClickOutsideMixin({\n    event: 'touchstart',\n    method: 'onClickOutside'\n  })],\n  props: {\n    value: Boolean,\n    trigger: String,\n    overlay: Boolean,\n    offset: {\n      type: Array,\n      default: function _default() {\n        return [0, 8];\n      }\n    },\n    theme: {\n      type: String,\n      default: 'light'\n    },\n    actions: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    placement: {\n      type: String,\n      default: 'bottom'\n    },\n    getContainer: {\n      type: [String, Function],\n      default: 'body'\n    },\n    closeOnClickAction: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {\n    value: 'updateLocation',\n    placement: 'updateLocation'\n  },\n  mounted: function mounted() {\n    this.updateLocation();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.popper) {\n      if (!isServer) {\n        window.removeEventListener('animationend', this.updateLocation);\n        window.removeEventListener('transitionend', this.updateLocation);\n      }\n      this.popper.destroy();\n      this.popper = null;\n    }\n  },\n  methods: {\n    createPopper: function createPopper() {\n      var popper = _createPopper(this.$refs.wrapper, this.$refs.popover.$el, {\n        placement: this.placement,\n        modifiers: [{\n          name: 'computeStyles',\n          options: {\n            adaptive: false,\n            gpuAcceleration: false\n          }\n        }, _extends({}, offsetModifier, {\n          options: {\n            offset: this.offset\n          }\n        })]\n      });\n      if (!isServer) {\n        window.addEventListener('animationend', this.updateLocation);\n        window.addEventListener('transitionend', this.updateLocation);\n      }\n      return popper;\n    },\n    updateLocation: function updateLocation() {\n      var _this = this;\n      this.$nextTick(function () {\n        if (!_this.value) {\n          return;\n        }\n        if (!_this.popper) {\n          _this.popper = _this.createPopper();\n        } else {\n          _this.popper.setOptions({\n            placement: _this.placement\n          });\n        }\n      });\n    },\n    renderAction: function renderAction(action, index) {\n      var _this2 = this;\n      var h = this.$createElement;\n      var icon = action.icon,\n        text = action.text,\n        disabled = action.disabled,\n        className = action.className;\n      return h(\"div\", {\n        \"attrs\": {\n          \"role\": \"menuitem\"\n        },\n        \"class\": [bem('action', {\n          disabled: disabled,\n          'with-icon': icon\n        }), className],\n        \"on\": {\n          \"click\": function click() {\n            return _this2.onClickAction(action, index);\n          }\n        }\n      }, [icon && h(Icon, {\n        \"attrs\": {\n          \"name\": icon\n        },\n        \"class\": bem('action-icon')\n      }), h(\"div\", {\n        \"class\": [bem('action-text'), BORDER_BOTTOM]\n      }, [text])]);\n    },\n    onToggle: function onToggle(value) {\n      this.$emit('input', value);\n    },\n    onClickWrapper: function onClickWrapper() {\n      if (this.trigger === 'click') {\n        this.onToggle(!this.value);\n      }\n    },\n    onTouchstart: function onTouchstart(event) {\n      event.stopPropagation();\n      this.$emit('touchstart', event);\n    },\n    onClickAction: function onClickAction(action, index) {\n      if (action.disabled) {\n        return;\n      }\n      this.$emit('select', action, index);\n      if (this.closeOnClickAction) {\n        this.$emit('input', false);\n      }\n    },\n    onClickOutside: function onClickOutside() {\n      this.$emit('input', false);\n    },\n    onOpen: function onOpen() {\n      this.$emit('open');\n    },\n    /* istanbul ignore next */\n    onOpened: function onOpened() {\n      this.$emit('opened');\n    },\n    onClose: function onClose() {\n      this.$emit('close');\n    },\n    /* istanbul ignore next */\n    onClosed: function onClosed() {\n      this.$emit('closed');\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    return h(\"span\", {\n      \"ref\": \"wrapper\",\n      \"class\": bem('wrapper'),\n      \"on\": {\n        \"click\": this.onClickWrapper\n      }\n    }, [h(Popup, {\n      \"ref\": \"popover\",\n      \"attrs\": {\n        \"value\": this.value,\n        \"overlay\": this.overlay,\n        \"position\": null,\n        \"transition\": \"van-popover-zoom\",\n        \"lockScroll\": false,\n        \"getContainer\": this.getContainer\n      },\n      \"class\": bem([this.theme]),\n      \"on\": {\n        \"open\": this.onOpen,\n        \"close\": this.onClose,\n        \"input\": this.onToggle,\n        \"opened\": this.onOpened,\n        \"closed\": this.onClosed\n      },\n      \"nativeOn\": {\n        \"touchstart\": this.onTouchstart\n      }\n    }, [h(\"div\", {\n      \"class\": bem('arrow')\n    }), h(\"div\", {\n      \"class\": bem('content'),\n      \"attrs\": {\n        \"role\": \"menu\"\n      }\n    }, [this.slots('default') || this.actions.map(this.renderAction)])]), this.slots('reference')]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}