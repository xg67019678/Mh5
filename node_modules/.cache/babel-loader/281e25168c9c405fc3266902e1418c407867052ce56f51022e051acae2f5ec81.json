{"ast":null,"code":"import { isHidden } from '../utils/dom/style';\nimport { unitToPx } from '../utils/format/unit';\nimport { createNamespace, isDef, isServer } from '../utils';\nimport { getScrollTop, getElementTop, getScroller } from '../utils/dom/scroll';\nimport { BindEventMixin } from '../mixins/bind-event';\nvar _createNamespace = createNamespace('sticky'),\n  createComponent = _createNamespace[0],\n  bem = _createNamespace[1];\nexport default createComponent({\n  mixins: [BindEventMixin(function (bind, isBind) {\n    if (!this.scroller) {\n      this.scroller = getScroller(this.$el);\n    }\n    if (this.observer) {\n      var method = isBind ? 'observe' : 'unobserve';\n      this.observer[method](this.$el);\n    }\n    bind(this.scroller, 'scroll', this.onScroll, true);\n    this.onScroll();\n  })],\n  props: {\n    zIndex: [Number, String],\n    container: null,\n    offsetTop: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      fixed: false,\n      height: 0,\n      transform: 0\n    };\n  },\n  computed: {\n    offsetTopPx: function offsetTopPx() {\n      return unitToPx(this.offsetTop);\n    },\n    style: function style() {\n      if (!this.fixed) {\n        return;\n      }\n      var style = {};\n      if (isDef(this.zIndex)) {\n        style.zIndex = this.zIndex;\n      }\n      if (this.offsetTopPx && this.fixed) {\n        style.top = this.offsetTopPx + \"px\";\n      }\n      if (this.transform) {\n        style.transform = \"translate3d(0, \" + this.transform + \"px, 0)\";\n      }\n      return style;\n    }\n  },\n  watch: {\n    fixed: function fixed(isFixed) {\n      this.$emit('change', isFixed);\n    }\n  },\n  created: function created() {\n    var _this = this;\n\n    // compatibility: https://caniuse.com/#feat=intersectionobserver\n    if (!isServer && window.IntersectionObserver) {\n      this.observer = new IntersectionObserver(function (entries) {\n        // trigger scroll when visibility changed\n        if (entries[0].intersectionRatio > 0) {\n          _this.onScroll();\n        }\n      }, {\n        root: document.body\n      });\n    }\n  },\n  methods: {\n    onScroll: function onScroll() {\n      var _this2 = this;\n      if (isHidden(this.$el)) {\n        return;\n      }\n      this.height = this.$el.offsetHeight;\n      var container = this.container,\n        offsetTopPx = this.offsetTopPx;\n      var scrollTop = getScrollTop(window);\n      var topToPageTop = getElementTop(this.$el);\n      var emitScrollEvent = function emitScrollEvent() {\n        _this2.$emit('scroll', {\n          scrollTop: scrollTop,\n          isFixed: _this2.fixed\n        });\n      }; // The sticky component should be kept inside the container element\n\n      if (container) {\n        var bottomToPageTop = topToPageTop + container.offsetHeight;\n        if (scrollTop + offsetTopPx + this.height > bottomToPageTop) {\n          var distanceToBottom = this.height + scrollTop - bottomToPageTop;\n          if (distanceToBottom < this.height) {\n            this.fixed = true;\n            this.transform = -(distanceToBottom + offsetTopPx);\n          } else {\n            this.fixed = false;\n          }\n          emitScrollEvent();\n          return;\n        }\n      }\n      if (scrollTop + offsetTopPx > topToPageTop) {\n        this.fixed = true;\n        this.transform = 0;\n      } else {\n        this.fixed = false;\n      }\n      emitScrollEvent();\n    }\n  },\n  render: function render() {\n    var h = arguments[0];\n    var fixed = this.fixed;\n    var style = {\n      height: fixed ? this.height + \"px\" : null\n    };\n    return h(\"div\", {\n      \"style\": style\n    }, [h(\"div\", {\n      \"class\": bem({\n        fixed: fixed\n      }),\n      \"style\": this.style\n    }, [this.slots()])]);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}