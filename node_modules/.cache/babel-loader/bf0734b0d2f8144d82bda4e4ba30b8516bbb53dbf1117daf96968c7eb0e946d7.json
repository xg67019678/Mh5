{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * router扩展，页面切换动画\n */\n// 负责SessionStorage存储路由历史。\nconst SessionStorage_key_Router_Extend_History = 'SessionStorage_key_Router_Extend_History';\nfunction transitionExtend(orgin) {\n  // 通过原路由对象创建一个新的对象\n  let router = Object.create(orgin);\n\n  // 扩展对象，保存当前栈数组和过渡动画名称\n  router.customRouterData = {\n    transitionName: '',\n    history: []\n  };\n\n  // 路由位置字符串在数组中的位置\n  router.indexOf = function (path) {\n    let arrLen = router.customRouterData.history.length;\n    for (let i = arrLen - 1; i >= 0; i--) {\n      if (router.customRouterData.history[i] == path) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  // 添加历史路由去路由数组\n  router.addRouterPath = function (path) {\n    router.customRouterData.history.push(path);\n    sessionStorage.setItem(SessionStorage_key_Router_Extend_History, JSON.stringify(router.customRouterData.history));\n  };\n\n  // 历史路由数组移除某个路由，n为参数可以移除多个\n  router.removeLastRouterPath = function (n = 1) {\n    if (n > 0) {\n      for (let i = 0; i < n; i++) {\n        router.customRouterData.history.pop();\n      }\n      sessionStorage.setItem(SessionStorage_key_Router_Extend_History, JSON.stringify(router.customRouterData.history));\n    }\n  };\n\n  // 初始化，为了页面刷新能恢复路由记录等\n  router.initRouterPaths = function (toPath) {\n    // 当存储了 router paths 时候，读取并赋值\n    let arrStr;\n    arrStr = sessionStorage.getItem(SessionStorage_key_Router_Extend_History);\n    if (arrStr && arrStr != undefined) {\n      let arr = JSON.parse(arrStr);\n      if (Array.isArray(arr) && arr.length > 0) {\n        // 进入页面\n        router.customRouterData.history = arr;\n      } else {\n        // 新进入页面\n        router.customRouterData.history = [];\n        router.customRouterData.history.push(toPath);\n      }\n    } else {\n      // 新进入页面\n      router.customRouterData.history = [];\n      router.customRouterData.history.push(toPath);\n    }\n\n    // 存储为了恢复\n    sessionStorage.setItem(SessionStorage_key_Router_Extend_History, JSON.stringify(router.customRouterData.history));\n  };\n\n  // push 修改路由历史，并设置动画\n  router.push = function () {\n    let location = arguments[0];\n    if (typeof location == 'string') {\n      router.addRouterPath(location);\n    } else {\n      router.addRouterPath(location.path);\n    }\n    router.customRouterData.transitionName = 'van-slide-' + (location.dir || 'right');\n    router.__proto__.push.call(this, ...arguments);\n  };\n\n  // replace 修改路由历史，并设置动画\n  router.replace = function () {\n    router.removeLastRouterPath();\n    let location = arguments[0];\n    if (typeof location == 'string') {\n      router.addRouterPath(location);\n    } else {\n      router.addRouterPath(location.path);\n    }\n    router.customRouterData.transitionName = 'van-slide-right';\n    router.__proto__.replace.call(this, ...arguments);\n  };\n\n  // go 修改路由历史，并设置动画\n  router.go = function (n) {\n    if (n > 0) {\n      // 禁止使用，这种情况比较复杂，使用较少，先忽略\n      console.error('router.go 暂不支持 前进 ！');\n      return;\n    }\n    router.removeLastRouterPath(-n);\n    router.customRouterData.transitionName = 'van-slide-left';\n    router.__proto__.go.call(this, n);\n  };\n\n  // back 修改路由历史，并设置动画\n  router.back = function () {\n    router.removeLastRouterPath();\n    router.customRouterData.transitionName = 'van-slide-left';\n    router.__proto__.go.call(this, -1);\n  };\n  router.forward = function () {\n    // 禁止使用，这种情况比较复杂，使用较少，先忽略\n    console.error('router.forward 暂不支持 ！');\n    return;\n  };\n\n  /**\n   * 按钮前进后退处理处理\n   * 返回：测滑返回，微信返回按钮，web返回按钮，以及android物理返回，android测滑返回\n   * 前进：微信上的前进按钮，web前进\n   * // 前进这里有个坑，待解决，先忽略\n   **/\n  router.otherEventTransitionName = function (toPath, fromPath) {\n    if (router.customRouterData.transitionName != '') {\n      // 没有数据意味着从，其他操作方式得到的路由变化\n      return;\n    }\n    let toIndex = router.indexOf(toPath);\n    if (toIndex == -1 || router.customRouterData.history.length - toIndex != 2) {\n      // 不存在，并且历史\n      router.addRouterPath(toPath);\n      router.customRouterData.transitionName = 'van-slide-right';\n    } else {\n      router.removeLastRouterPath();\n      router.customRouterData.transitionName = 'van-slide-left';\n    }\n  };\n\n  // 是否已经初始化\n  let isInit = false;\n\n  // 跳转之前\n  router.beforeEach((to, from, next) => {\n    if (isInit) {\n      router.otherEventTransitionName(to.path, from.path);\n    } else {\n      isInit = true;\n      router.initRouterPaths(to.path);\n    }\n    next();\n  });\n\n  // 跳转之后\n  router.afterEach((to, from) => {\n    setTimeout(() => {\n      // 使用动画之后立即移除\n      router.customRouterData.transitionName = '';\n    }, 300);\n  });\n  return router;\n}\nexport default transitionExtend;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}