{"ast":null,"code":"import \"vant/es/icon/style\";\nimport _Icon from \"vant/es/icon\";\nimport \"vant/es/dialog/style\";\nimport _Dialog from \"vant/es/dialog\";\nimport \"vant/es/pull-refresh/style\";\nimport _PullRefresh from \"vant/es/pull-refresh\";\nimport \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport \"vant/es/empty/style\";\nimport _Empty from \"vant/es/empty\";\nimport \"vant/es/tabs/style\";\nimport _Tabs from \"vant/es/tabs\";\nimport \"vant/es/tab/style\";\nimport _Tab from \"vant/es/tab\";\nimport \"vant/es/list/style\";\nimport _List from \"vant/es/list\";\nimport \"vant/es/nav-bar/style\";\nimport _NavBar from \"vant/es/nav-bar\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport CancelDialog from \"./components/CancelDialog.vue\";\nimport RemindsDialog from \"./components/RemindsDialog.vue\";\nimport { isLogin, priceFormat } from \"@/utils/utis\";\nimport { orderListMain, orderReceipt } from \"@/API/user\";\nexport default {\n  name: \"Order\",\n  components: {\n    [_NavBar.name]: _NavBar,\n    [_List.name]: _List,\n    [_Tab.name]: _Tab,\n    [_Tabs.name]: _Tabs,\n    [_Empty.name]: _Empty,\n    [_Toast.name]: _Toast,\n    [_PullRefresh.name]: _PullRefresh,\n    [_Dialog.name]: _Dialog,\n    CancelDialog,\n    RemindsDialog,\n    [_Icon.name]: _Icon\n  },\n  data() {\n    return {\n      isShowTopBtn: false,\n      copyIcon: require(\"@/assets/image/me/fuzhi1.png\"),\n      currentNav: \"\",\n      navData: [{\n        title: this.$t(\"全部\"),\n        name: \"\"\n      }, {\n        title: this.$t(\"待付款\"),\n        name: \"0\"\n      }, {\n        title: this.$t(\"待发货\"),\n        name: \"1\"\n      }, {\n        title: this.$t(\"待收货\"),\n        name: \"3\"\n      }, {\n        title: this.$t(\"待评价\"),\n        name: \"4\"\n      }, {\n        title: this.$t(\"退款/售后\"),\n        name: \"6\"\n      }],\n      loading: false,\n      finished: false,\n      refreshing: false,\n      pageNum: 1,\n      pageSize: 10,\n      list: [],\n      cancelShow: false,\n      remindShow: false,\n      currentData: {},\n      isToask: true\n    };\n  },\n  mounted() {\n    window.addEventListener(\"scroll\", () => {\n      this.isShowTopBtn = document.documentElement.scrollTop || document.body.scrollTop > 500;\n    });\n  },\n  created() {\n    if (!isLogin()) {\n      this.$router.push(\"/\");\n    } else {\n      const {\n        query\n      } = this.$route;\n      if (query && query.type) {\n        this.currentNav = query.type;\n      }\n    }\n    this.onLoad();\n  },\n  methods: {\n    copyHandle(txt) {\n      this.$copyText(txt).then(() => {\n        _Toast(this.$t(\"复制成功\"));\n      }, () => {\n        _Toast(this.$t(\"复制失败\"));\n      });\n    },\n    priceFormat(num) {\n      return priceFormat(num);\n    },\n    onRefresh() {\n      this.finished = false;\n      this.pageNum = 1;\n      this.loading = true;\n      this.onLoad();\n      // this.isToask && Toast(this.$t(\"刷新成功\"));\n      this.isToask = true;\n    },\n    tableChange(val) {\n      _Toast.loading({\n        duration: 0,\n        message: this.$t(\"加载中\")\n      });\n      this.list = [];\n      this.onRefresh();\n    },\n    onLoad() {\n      if (this.refreshing) {\n        this.list = [];\n        this.refreshing = false;\n      }\n      this.getTableList();\n    },\n    getTableList() {\n      const params = {\n        pageNum: this.pageNum,\n        pageSize: this.pageSize\n      };\n      if (this.currentNav) {\n        params.status = Number(this.currentNav);\n      }\n      orderListMain(params).then(res => {\n        const {\n          pageList\n        } = res;\n        this.list = this.pageNum === 1 ? pageList : [...this.list, ...pageList];\n        this.pageNum++;\n        this.loading = false;\n        _Toast.clear();\n        if (pageList.length < this.pageSize) {\n          this.finished = true;\n        }\n        var obj = {};\n        this.list = this.list.reduce((prev, cur) => {\n          obj[cur.id] ? \"\" : obj[cur.id] = true && prev.push(cur);\n          return prev;\n        }, []);\n      }).catch(() => {\n        this.loading = false;\n        this.finished = true;\n        _Toast.clear();\n      });\n    },\n    // 取消订单\n    cancleOrder(data) {\n      this.currentData = data;\n      this.cancelShow = true;\n    },\n    // 提醒发货\n    remindHandle(data) {\n      const remindStore = localStorage.getItem(\"remindStore\") ? JSON.parse(localStorage.getItem(\"remindStore\")) : [];\n      if (!remindStore.includes(data.id)) {\n        this.currentData = data;\n        this.remindShow = true;\n      } else {\n        _Toast(this.$t(\"该订单已提醒过啦~\"));\n      }\n    },\n    openPage(path, query) {\n      const params = {\n        path\n      };\n      if (query) {\n        params.query = query;\n      }\n      this.$router.push(params);\n    },\n    //跳转待支付页面\n    openPeddingPay(data) {\n      const list = [{\n        orderList: data.id,\n        orderId: data.id\n      }];\n      this.$router.push({\n        path: \"/PendingPayment\",\n        query: {\n          orderList: JSON.stringify(list),\n          total: data.priceCount\n        }\n      });\n    },\n    // 收货\n    orderPick(data) {\n      _Dialog.confirm({\n        title: this.$t(\"提示\"),\n        message: this.$t(\"确认收货吗？\"),\n        confirmButtonText: this.$t(\"确认\"),\n        cancelButtonText: this.$t(\"取消\")\n      }).then(() => {\n        _Toast.loading({\n          duration: 0,\n          message: this.$t(\"提交中\"),\n          forbidClick: true\n        });\n        const params = {\n          orderId: data.id\n        };\n        orderReceipt(params).then(() => {\n          _Toast.clear();\n          _Toast(this.$t(\"收货成功\"));\n          this.isToask = false;\n          setTimeout(() => {\n            this.tableChange();\n          }, 1000);\n        }).catch(() => {\n          _Toast.clear();\n        });\n      }).catch(() => {\n        console.log(\"cancel\");\n      });\n    },\n    handleToTop() {\n      scrollTo({\n        top: 0,\n        left: 0,\n        behavior: 'smooth'\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}